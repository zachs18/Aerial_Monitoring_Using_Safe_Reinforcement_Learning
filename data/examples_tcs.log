03/21/2020 06:57:19 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
03/21/2020 06:57:19 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
03/21/2020 06:57:19 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
03/21/2020 06:57:19 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
03/21/2020 06:57:19 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
03/21/2020 06:57:19 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
03/21/2020 06:57:19 PM INFO Trap states were added.
03/21/2020 06:57:19 PM INFO Trap states were added.
03/21/2020 06:57:19 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
03/21/2020 06:57:19 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
03/21/2020 06:57:19 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
03/21/2020 06:57:19 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
03/21/2020 06:57:19 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
03/21/2020 06:57:19 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
03/21/2020 06:57:19 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
03/21/2020 06:57:19 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
03/21/2020 06:57:19 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
03/21/2020 06:57:19 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
03/21/2020 06:57:19 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
03/21/2020 06:57:19 PM INFO No trap states were added.
03/21/2020 06:57:19 PM INFO No trap states were added.
03/21/2020 06:57:19 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
03/21/2020 06:57:19 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
03/21/2020 06:57:19 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
03/21/2020 06:57:19 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
03/21/2020 06:57:19 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
03/21/2020 06:57:19 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
03/21/2020 06:57:19 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
03/21/2020 06:57:19 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
03/21/2020 06:57:19 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
03/21/2020 06:57:19 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
03/21/2020 06:57:19 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
03/21/2020 06:57:19 PM DEBUG [spec] No of nodes: 40
03/21/2020 06:57:19 PM DEBUG [spec] No of edges: 72
03/21/2020 06:57:19 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
03/21/2020 06:57:19 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
03/21/2020 06:57:19 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

03/21/2020 06:57:19 PM DEBUG [spec] No of nodes: 11
03/21/2020 06:57:19 PM DEBUG [spec] No of edges: 24
03/21/2020 06:57:19 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
03/21/2020 06:57:19 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
03/21/2020 06:57:19 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
03/21/2020 06:57:19 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
03/21/2020 06:57:19 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
03/21/2020 06:57:19 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
03/21/2020 06:57:19 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
03/21/2020 06:57:19 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
03/21/2020 06:57:19 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
03/21/2020 06:57:19 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
03/21/2020 06:57:19 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
03/21/2020 06:57:19 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
03/21/2020 06:57:19 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
03/21/2020 06:57:19 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
03/21/2020 06:57:19 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
03/21/2020 06:57:19 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
03/21/2020 06:57:19 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
03/21/2020 06:57:19 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
03/21/2020 06:57:19 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
03/21/2020 06:57:19 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
03/21/2020 06:57:19 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
03/21/2020 06:57:19 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
03/21/2020 06:57:19 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
03/21/2020 06:57:19 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
03/21/2020 06:57:19 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
03/21/2020 06:57:19 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
09/23/2024 09:59:26 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
09/23/2024 09:59:26 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
09/23/2024 09:59:26 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
09/23/2024 09:59:26 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
09/23/2024 09:59:26 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
09/23/2024 09:59:26 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
09/23/2024 09:59:26 PM INFO Trap states were added.
09/23/2024 09:59:26 PM INFO Trap states were added.
09/23/2024 09:59:26 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
09/23/2024 09:59:26 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
09/23/2024 09:59:26 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
09/23/2024 09:59:26 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
09/23/2024 09:59:26 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
09/23/2024 09:59:26 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
09/23/2024 09:59:26 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
09/23/2024 09:59:26 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
09/23/2024 09:59:26 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
09/23/2024 09:59:26 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
09/23/2024 09:59:26 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
09/23/2024 09:59:26 PM INFO No trap states were added.
09/23/2024 09:59:26 PM INFO No trap states were added.
09/23/2024 09:59:26 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
09/23/2024 09:59:26 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
09/23/2024 09:59:26 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
09/23/2024 09:59:26 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
09/23/2024 09:59:26 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
09/23/2024 09:59:26 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
09/23/2024 09:59:26 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
09/23/2024 09:59:26 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
09/23/2024 09:59:26 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
09/23/2024 09:59:26 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
09/23/2024 09:59:26 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
09/23/2024 09:59:26 PM DEBUG [spec] No of nodes: 40
09/23/2024 09:59:26 PM DEBUG [spec] No of edges: 72
09/23/2024 09:59:26 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
09/23/2024 09:59:26 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
09/23/2024 09:59:26 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

09/23/2024 09:59:26 PM DEBUG [spec] No of nodes: 11
09/23/2024 09:59:26 PM DEBUG [spec] No of edges: 24
09/23/2024 09:59:26 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
09/23/2024 09:59:26 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/23/2024 09:59:26 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/23/2024 09:59:26 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/23/2024 09:59:26 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/23/2024 09:59:26 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/23/2024 09:59:26 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/23/2024 09:59:26 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
09/23/2024 09:59:26 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
09/23/2024 09:59:26 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
09/23/2024 09:59:26 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
09/23/2024 09:59:26 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
09/23/2024 09:59:26 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
09/23/2024 09:59:26 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
09/23/2024 09:59:26 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
09/23/2024 09:59:26 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
09/23/2024 09:59:26 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
09/23/2024 09:59:26 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
09/23/2024 09:59:26 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
09/23/2024 09:59:26 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/23/2024 09:59:26 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
09/23/2024 09:59:26 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
09/23/2024 09:59:26 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
09/23/2024 09:59:26 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
09/23/2024 09:59:26 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/23/2024 09:59:26 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
09/23/2024 09:59:38 PM DEBUG 
End of translate


09/23/2024 09:59:38 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
09/23/2024 09:59:38 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
09/23/2024 09:59:38 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
09/23/2024 09:59:38 PM DEBUG 

Start policy computation

09/23/2024 09:59:38 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
09/23/2024 09:59:38 PM INFO Constructing product automaton with normal DFA!
09/23/2024 09:59:38 PM INFO Product automaton size is: (204, 378)
10/08/2024 03:51:04 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:04 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
10/08/2024 03:51:04 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:04 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
10/08/2024 03:51:04 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:04 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
10/08/2024 03:51:04 PM INFO Trap states were added.
10/08/2024 03:51:04 PM INFO Trap states were added.
10/08/2024 03:51:04 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
10/08/2024 03:51:04 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
10/08/2024 03:51:04 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:04 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
10/08/2024 03:51:04 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
10/08/2024 03:51:04 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:04 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
10/08/2024 03:51:04 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:04 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
10/08/2024 03:51:04 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:04 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
10/08/2024 03:51:04 PM INFO No trap states were added.
10/08/2024 03:51:04 PM INFO No trap states were added.
10/08/2024 03:51:04 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/08/2024 03:51:04 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/08/2024 03:51:04 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
10/08/2024 03:51:04 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
10/08/2024 03:51:04 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
10/08/2024 03:51:04 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
10/08/2024 03:51:04 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:04 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
10/08/2024 03:51:04 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
10/08/2024 03:51:04 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/08/2024 03:51:04 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
10/08/2024 03:51:04 PM DEBUG [spec] No of nodes: 40
10/08/2024 03:51:04 PM DEBUG [spec] No of edges: 72
10/08/2024 03:51:04 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/08/2024 03:51:04 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
10/08/2024 03:51:04 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

10/08/2024 03:51:04 PM DEBUG [spec] No of nodes: 11
10/08/2024 03:51:04 PM DEBUG [spec] No of edges: 24
10/08/2024 03:51:04 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
10/08/2024 03:51:04 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/08/2024 03:51:04 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/08/2024 03:51:04 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/08/2024 03:51:04 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/08/2024 03:51:04 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/08/2024 03:51:04 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/08/2024 03:51:04 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
10/08/2024 03:51:04 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
10/08/2024 03:51:04 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/08/2024 03:51:04 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/08/2024 03:51:04 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
10/08/2024 03:51:04 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/08/2024 03:51:04 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/08/2024 03:51:04 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/08/2024 03:51:04 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
10/08/2024 03:51:04 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/08/2024 03:51:04 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
10/08/2024 03:51:04 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/08/2024 03:51:04 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/08/2024 03:51:04 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/08/2024 03:51:04 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/08/2024 03:51:04 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
10/08/2024 03:51:04 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/08/2024 03:51:04 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/08/2024 03:51:04 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
10/08/2024 03:51:12 PM DEBUG 
End of translate


10/08/2024 03:51:12 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
10/08/2024 03:51:12 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
10/08/2024 03:51:12 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
10/08/2024 03:51:12 PM DEBUG 

Start policy computation

10/08/2024 03:51:12 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
10/08/2024 03:51:12 PM INFO Constructing product automaton with normal DFA!
10/08/2024 03:51:12 PM INFO Product automaton size is: (204, 378)
10/08/2024 03:51:50 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:50 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
10/08/2024 03:51:50 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:50 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
10/08/2024 03:51:50 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:50 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
10/08/2024 03:51:50 PM INFO Trap states were added.
10/08/2024 03:51:50 PM INFO Trap states were added.
10/08/2024 03:51:50 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
10/08/2024 03:51:50 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
10/08/2024 03:51:50 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:50 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
10/08/2024 03:51:50 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
10/08/2024 03:51:50 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:50 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
10/08/2024 03:51:50 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:50 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
10/08/2024 03:51:50 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:50 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
10/08/2024 03:51:50 PM INFO No trap states were added.
10/08/2024 03:51:50 PM INFO No trap states were added.
10/08/2024 03:51:50 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/08/2024 03:51:50 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/08/2024 03:51:50 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
10/08/2024 03:51:50 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
10/08/2024 03:51:50 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
10/08/2024 03:51:50 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
10/08/2024 03:51:50 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/08/2024 03:51:50 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
10/08/2024 03:51:50 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
10/08/2024 03:51:50 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/08/2024 03:51:50 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
10/08/2024 03:51:50 PM DEBUG [spec] No of nodes: 40
10/08/2024 03:51:50 PM DEBUG [spec] No of edges: 72
10/08/2024 03:51:50 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/08/2024 03:51:50 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
10/08/2024 03:51:50 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

10/08/2024 03:51:50 PM DEBUG [spec] No of nodes: 11
10/08/2024 03:51:50 PM DEBUG [spec] No of edges: 24
10/08/2024 03:51:50 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
10/08/2024 03:51:50 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/08/2024 03:51:50 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/08/2024 03:51:50 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/08/2024 03:51:50 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/08/2024 03:51:50 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/08/2024 03:51:50 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/08/2024 03:51:50 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
10/08/2024 03:51:50 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
10/08/2024 03:51:50 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/08/2024 03:51:50 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/08/2024 03:51:50 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
10/08/2024 03:51:50 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/08/2024 03:51:50 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/08/2024 03:51:50 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/08/2024 03:51:50 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
10/08/2024 03:51:50 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/08/2024 03:51:50 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
10/08/2024 03:51:50 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/08/2024 03:51:50 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/08/2024 03:51:50 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/08/2024 03:51:50 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/08/2024 03:51:50 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
10/08/2024 03:51:50 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/08/2024 03:51:50 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/08/2024 03:51:50 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
10/08/2024 03:51:53 PM DEBUG 
End of translate


10/08/2024 03:51:53 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
10/08/2024 03:51:53 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
10/08/2024 03:51:53 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
10/08/2024 03:51:53 PM DEBUG 

Start policy computation

10/08/2024 03:51:53 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
10/08/2024 03:51:53 PM INFO Constructing product automaton with normal DFA!
10/08/2024 03:51:53 PM INFO Product automaton size is: (204, 378)
10/15/2024 11:22:45 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 11:22:45 AM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 11:22:45 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 11:22:45 AM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 11:22:45 AM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 11:22:45 AM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 11:22:45 AM INFO Trap states were added.
10/15/2024 11:22:45 AM INFO Trap states were added.
10/15/2024 11:22:45 AM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
10/15/2024 11:22:45 AM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
10/15/2024 11:22:45 AM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 11:22:45 AM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 11:22:45 AM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
10/15/2024 11:22:45 AM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 11:22:45 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 11:22:45 AM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 11:22:45 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 11:22:45 AM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 11:22:45 AM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 11:22:45 AM INFO No trap states were added.
10/15/2024 11:22:45 AM INFO No trap states were added.
10/15/2024 11:22:45 AM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 11:22:45 AM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 11:22:45 AM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
10/15/2024 11:22:45 AM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
10/15/2024 11:22:45 AM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
10/15/2024 11:22:45 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
10/15/2024 11:22:45 AM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 11:22:45 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 11:22:45 AM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
10/15/2024 11:22:45 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 11:22:45 AM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
10/15/2024 11:22:45 AM DEBUG [spec] No of nodes: 40
10/15/2024 11:22:45 AM DEBUG [spec] No of edges: 72
10/15/2024 11:22:45 AM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 11:22:45 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
10/15/2024 11:22:45 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

10/15/2024 11:22:45 AM DEBUG [spec] No of nodes: 11
10/15/2024 11:22:45 AM DEBUG [spec] No of edges: 24
10/15/2024 11:22:45 AM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
10/15/2024 11:22:45 AM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 11:22:45 AM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 11:22:45 AM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 11:22:45 AM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 11:22:45 AM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 11:22:45 AM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 11:22:45 AM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
10/15/2024 11:22:45 AM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
10/15/2024 11:22:45 AM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 11:22:45 AM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 11:22:45 AM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
10/15/2024 11:22:45 AM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 11:22:45 AM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 11:22:45 AM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 11:22:45 AM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
10/15/2024 11:22:45 AM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 11:22:45 AM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
10/15/2024 11:22:45 AM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 11:22:45 AM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 11:22:45 AM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 11:22:45 AM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 11:22:45 AM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
10/15/2024 11:22:45 AM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 11:22:45 AM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 11:22:45 AM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
10/15/2024 11:24:08 AM DEBUG 
End of translate


10/15/2024 11:24:08 AM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
10/15/2024 11:24:08 AM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
10/15/2024 11:24:08 AM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
10/15/2024 11:24:08 AM DEBUG 

Start policy computation

10/15/2024 11:24:08 AM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
10/15/2024 11:24:08 AM INFO Constructing product automaton with normal DFA!
10/15/2024 11:24:08 AM INFO Product automaton size is: (204, 378)
10/15/2024 12:02:24 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:02:24 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:02:24 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:02:24 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:02:24 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:02:24 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:02:24 PM INFO Trap states were added.
10/15/2024 12:02:24 PM INFO Trap states were added.
10/15/2024 12:02:24 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
10/15/2024 12:02:24 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
10/15/2024 12:02:24 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:02:24 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:02:24 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
10/15/2024 12:02:24 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:02:24 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:02:24 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:02:24 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:02:24 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:02:24 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:02:24 PM INFO No trap states were added.
10/15/2024 12:02:24 PM INFO No trap states were added.
10/15/2024 12:02:24 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:02:24 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:02:24 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
10/15/2024 12:02:24 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
10/15/2024 12:02:24 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
10/15/2024 12:02:24 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
10/15/2024 12:02:24 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:02:24 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:02:24 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
10/15/2024 12:02:24 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:02:24 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
10/15/2024 12:02:24 PM DEBUG [spec] No of nodes: 40
10/15/2024 12:02:24 PM DEBUG [spec] No of edges: 72
10/15/2024 12:02:24 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:02:24 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
10/15/2024 12:02:24 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

10/15/2024 12:02:24 PM DEBUG [spec] No of nodes: 11
10/15/2024 12:02:24 PM DEBUG [spec] No of edges: 24
10/15/2024 12:02:24 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
10/15/2024 12:02:24 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:02:24 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:02:24 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:02:24 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:02:24 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:02:24 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:02:24 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
10/15/2024 12:02:24 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
10/15/2024 12:02:24 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:02:24 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:02:24 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
10/15/2024 12:02:24 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:02:24 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:02:24 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:02:24 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
10/15/2024 12:02:24 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:02:24 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
10/15/2024 12:02:24 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:02:24 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:02:24 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:02:24 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:02:24 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
10/15/2024 12:02:24 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:02:24 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:02:25 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
10/15/2024 12:02:27 PM DEBUG 
End of translate


10/15/2024 12:02:27 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
10/15/2024 12:02:27 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
10/15/2024 12:02:27 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
10/15/2024 12:02:27 PM DEBUG 

Start policy computation

10/15/2024 12:02:27 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
10/15/2024 12:02:27 PM INFO Constructing product automaton with normal DFA!
10/15/2024 12:02:27 PM INFO Product automaton size is: (204, 378)
10/15/2024 12:03:32 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:03:32 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:03:32 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:03:32 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:03:32 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:03:32 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:03:32 PM INFO Trap states were added.
10/15/2024 12:03:32 PM INFO Trap states were added.
10/15/2024 12:03:32 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
10/15/2024 12:03:32 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
10/15/2024 12:03:32 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:03:32 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:03:32 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
10/15/2024 12:03:32 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:03:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:03:32 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:03:32 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:03:32 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:03:32 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:03:32 PM INFO No trap states were added.
10/15/2024 12:03:32 PM INFO No trap states were added.
10/15/2024 12:03:32 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:03:32 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:03:32 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
10/15/2024 12:03:32 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
10/15/2024 12:03:32 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
10/15/2024 12:03:32 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
10/15/2024 12:03:32 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:03:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:03:32 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
10/15/2024 12:03:32 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:03:32 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
10/15/2024 12:03:32 PM DEBUG [spec] No of nodes: 40
10/15/2024 12:03:32 PM DEBUG [spec] No of edges: 72
10/15/2024 12:03:32 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:03:32 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
10/15/2024 12:03:32 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

10/15/2024 12:03:32 PM DEBUG [spec] No of nodes: 11
10/15/2024 12:03:32 PM DEBUG [spec] No of edges: 24
10/15/2024 12:03:32 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
10/15/2024 12:03:32 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:03:32 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:03:32 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:03:32 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:03:32 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:03:32 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:03:32 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
10/15/2024 12:03:32 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
10/15/2024 12:03:32 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:03:32 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:03:32 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
10/15/2024 12:03:32 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:03:32 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:03:32 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:03:32 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
10/15/2024 12:03:32 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:03:32 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
10/15/2024 12:03:32 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:03:32 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:03:32 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:03:32 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:03:32 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
10/15/2024 12:03:32 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:03:32 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:03:32 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
10/15/2024 12:03:34 PM DEBUG 
End of translate


10/15/2024 12:03:34 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
10/15/2024 12:03:34 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
10/15/2024 12:03:34 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
10/15/2024 12:03:34 PM DEBUG 

Start policy computation

10/15/2024 12:03:34 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
10/15/2024 12:03:34 PM INFO Constructing product automaton with normal DFA!
10/15/2024 12:03:34 PM INFO Product automaton size is: (204, 378)
10/15/2024 12:04:18 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:18 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:04:18 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:18 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:04:18 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:18 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:04:18 PM INFO Trap states were added.
10/15/2024 12:04:18 PM INFO Trap states were added.
10/15/2024 12:04:18 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
10/15/2024 12:04:18 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
10/15/2024 12:04:18 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:18 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:04:18 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
10/15/2024 12:04:18 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:18 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:04:18 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:18 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:04:18 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:18 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:04:18 PM INFO No trap states were added.
10/15/2024 12:04:18 PM INFO No trap states were added.
10/15/2024 12:04:18 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:04:18 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:04:18 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
10/15/2024 12:04:18 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
10/15/2024 12:04:18 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
10/15/2024 12:04:18 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
10/15/2024 12:04:18 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:18 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:04:18 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
10/15/2024 12:04:18 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:04:18 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
10/15/2024 12:04:18 PM DEBUG [spec] No of nodes: 40
10/15/2024 12:04:18 PM DEBUG [spec] No of edges: 72
10/15/2024 12:04:18 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:04:18 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
10/15/2024 12:04:18 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

10/15/2024 12:04:18 PM DEBUG [spec] No of nodes: 11
10/15/2024 12:04:18 PM DEBUG [spec] No of edges: 24
10/15/2024 12:04:18 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
10/15/2024 12:04:18 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:04:18 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:04:18 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:04:18 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:04:18 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:04:18 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:04:18 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
10/15/2024 12:04:18 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
10/15/2024 12:04:18 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:04:18 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:04:18 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
10/15/2024 12:04:18 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:04:18 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:04:18 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:04:18 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
10/15/2024 12:04:18 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:04:18 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
10/15/2024 12:04:18 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:04:18 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:04:18 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:04:18 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:04:18 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
10/15/2024 12:04:18 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:04:18 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:04:18 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
10/15/2024 12:04:20 PM DEBUG 
End of translate


10/15/2024 12:04:20 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
10/15/2024 12:04:20 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
10/15/2024 12:04:20 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
10/15/2024 12:04:20 PM DEBUG 

Start policy computation

10/15/2024 12:04:20 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
10/15/2024 12:04:20 PM INFO Constructing product automaton with normal DFA!
10/15/2024 12:04:20 PM INFO Product automaton size is: (204, 378)
10/15/2024 12:04:20 PM INFO Max deadline: None
10/15/2024 12:04:32 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:32 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:04:32 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:32 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:04:32 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:32 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:04:32 PM INFO Trap states were added.
10/15/2024 12:04:32 PM INFO Trap states were added.
10/15/2024 12:04:32 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
10/15/2024 12:04:32 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
10/15/2024 12:04:32 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:32 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:04:32 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
10/15/2024 12:04:32 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:04:32 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:32 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:04:32 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:32 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:04:32 PM INFO No trap states were added.
10/15/2024 12:04:32 PM INFO No trap states were added.
10/15/2024 12:04:32 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:04:32 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:04:32 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
10/15/2024 12:04:32 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
10/15/2024 12:04:32 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
10/15/2024 12:04:32 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
10/15/2024 12:04:32 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:04:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:04:32 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
10/15/2024 12:04:32 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:04:32 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
10/15/2024 12:04:32 PM DEBUG [spec] No of nodes: 40
10/15/2024 12:04:32 PM DEBUG [spec] No of edges: 72
10/15/2024 12:04:32 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:04:32 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
10/15/2024 12:04:32 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

10/15/2024 12:04:32 PM DEBUG [spec] No of nodes: 11
10/15/2024 12:04:32 PM DEBUG [spec] No of edges: 24
10/15/2024 12:04:32 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
10/15/2024 12:04:32 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:04:32 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:04:32 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:04:32 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:04:32 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:04:32 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:04:32 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
10/15/2024 12:04:32 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
10/15/2024 12:04:32 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:04:32 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:04:32 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
10/15/2024 12:04:32 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:04:32 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:04:32 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:04:32 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
10/15/2024 12:04:32 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:04:32 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
10/15/2024 12:04:32 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:04:32 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:04:32 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:04:32 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:04:32 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
10/15/2024 12:04:32 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:04:32 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:04:33 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
10/15/2024 12:04:34 PM DEBUG 
End of translate


10/15/2024 12:04:34 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
10/15/2024 12:04:34 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
10/15/2024 12:04:34 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
10/15/2024 12:04:34 PM DEBUG 

Start policy computation

10/15/2024 12:04:34 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
10/15/2024 12:04:34 PM INFO Constructing product automaton with normal DFA!
10/15/2024 12:04:34 PM INFO Product automaton size is: (204, 378)
10/15/2024 12:09:12 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:12 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:09:12 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:12 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:09:12 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:12 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:09:12 PM INFO Trap states were added.
10/15/2024 12:09:12 PM INFO Trap states were added.
10/15/2024 12:09:12 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
10/15/2024 12:09:12 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
10/15/2024 12:09:12 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:12 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:09:12 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
10/15/2024 12:09:12 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:09:12 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:12 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:09:12 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:12 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:09:12 PM INFO No trap states were added.
10/15/2024 12:09:12 PM INFO No trap states were added.
10/15/2024 12:09:12 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:09:12 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:09:12 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
10/15/2024 12:09:12 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
10/15/2024 12:09:12 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
10/15/2024 12:09:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
10/15/2024 12:09:12 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:12 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:09:12 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
10/15/2024 12:09:12 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:09:12 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
10/15/2024 12:09:12 PM DEBUG [spec] No of nodes: 40
10/15/2024 12:09:12 PM DEBUG [spec] No of edges: 72
10/15/2024 12:09:12 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:09:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
10/15/2024 12:09:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

10/15/2024 12:09:12 PM DEBUG [spec] No of nodes: 11
10/15/2024 12:09:12 PM DEBUG [spec] No of edges: 24
10/15/2024 12:09:12 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
10/15/2024 12:09:12 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:09:12 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:09:12 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:09:12 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:09:12 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:09:12 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:09:12 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
10/15/2024 12:09:12 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
10/15/2024 12:09:12 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:09:12 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:09:12 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
10/15/2024 12:09:12 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:09:12 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:09:12 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:09:12 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
10/15/2024 12:09:12 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:09:12 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
10/15/2024 12:09:12 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:09:12 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:09:12 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:09:12 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:09:12 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
10/15/2024 12:09:12 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:09:12 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:09:12 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
10/15/2024 12:09:15 PM DEBUG 
End of translate


10/15/2024 12:09:15 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
10/15/2024 12:09:15 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
10/15/2024 12:09:15 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
10/15/2024 12:09:15 PM DEBUG 

Start policy computation

10/15/2024 12:09:15 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
10/15/2024 12:09:15 PM INFO Constructing product automaton with normal DFA!
10/15/2024 12:09:15 PM INFO Product automaton size is: (204, 378)
10/15/2024 12:09:23 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:23 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:09:23 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:23 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:09:23 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:23 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:09:23 PM INFO Trap states were added.
10/15/2024 12:09:23 PM INFO Trap states were added.
10/15/2024 12:09:23 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
10/15/2024 12:09:23 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
10/15/2024 12:09:23 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:23 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:09:23 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
10/15/2024 12:09:23 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:23 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:09:23 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:23 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:09:23 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:23 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:09:23 PM INFO No trap states were added.
10/15/2024 12:09:23 PM INFO No trap states were added.
10/15/2024 12:09:23 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:09:23 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:09:23 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
10/15/2024 12:09:23 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
10/15/2024 12:09:23 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
10/15/2024 12:09:23 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
10/15/2024 12:09:23 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:09:23 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:09:23 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
10/15/2024 12:09:23 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:09:23 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
10/15/2024 12:09:23 PM DEBUG [spec] No of nodes: 40
10/15/2024 12:09:23 PM DEBUG [spec] No of edges: 72
10/15/2024 12:09:23 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:09:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
10/15/2024 12:09:23 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

10/15/2024 12:09:23 PM DEBUG [spec] No of nodes: 11
10/15/2024 12:09:23 PM DEBUG [spec] No of edges: 24
10/15/2024 12:09:23 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
10/15/2024 12:09:23 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:09:23 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:09:23 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:09:23 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:09:23 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:09:23 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:09:23 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
10/15/2024 12:09:23 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
10/15/2024 12:09:23 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:09:23 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:09:23 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
10/15/2024 12:09:23 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:09:23 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:09:23 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:09:23 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
10/15/2024 12:09:23 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:09:23 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
10/15/2024 12:09:23 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:09:23 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:09:23 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:09:23 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:09:23 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
10/15/2024 12:09:23 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:09:23 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:09:23 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
10/15/2024 12:09:25 PM DEBUG 
End of translate


10/15/2024 12:09:25 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
10/15/2024 12:09:25 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
10/15/2024 12:09:25 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
10/15/2024 12:09:25 PM DEBUG 

Start policy computation

10/15/2024 12:09:25 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
10/15/2024 12:09:25 PM INFO Constructing product automaton with normal DFA!
10/15/2024 12:09:25 PM INFO Product automaton size is: (204, 378)
10/15/2024 12:17:29 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:29 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:17:29 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:29 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:17:29 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:29 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:17:29 PM INFO Trap states were added.
10/15/2024 12:17:29 PM INFO Trap states were added.
10/15/2024 12:17:29 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
10/15/2024 12:17:29 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
10/15/2024 12:17:29 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:29 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:17:29 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
10/15/2024 12:17:29 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:29 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:17:29 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:29 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:17:29 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:29 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:17:29 PM INFO No trap states were added.
10/15/2024 12:17:29 PM INFO No trap states were added.
10/15/2024 12:17:29 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:17:29 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:17:29 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
10/15/2024 12:17:29 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
10/15/2024 12:17:29 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
10/15/2024 12:17:29 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
10/15/2024 12:17:29 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:29 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:17:29 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
10/15/2024 12:17:29 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:17:29 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
10/15/2024 12:17:29 PM DEBUG [spec] No of nodes: 40
10/15/2024 12:17:29 PM DEBUG [spec] No of edges: 72
10/15/2024 12:17:29 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:17:29 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
10/15/2024 12:17:29 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

10/15/2024 12:17:29 PM DEBUG [spec] No of nodes: 11
10/15/2024 12:17:29 PM DEBUG [spec] No of edges: 24
10/15/2024 12:17:29 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
10/15/2024 12:17:29 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:17:29 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:17:29 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:17:29 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:17:29 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:17:29 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:17:29 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
10/15/2024 12:17:29 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
10/15/2024 12:17:29 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:17:29 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:17:29 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
10/15/2024 12:17:29 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:17:29 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:17:29 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:17:29 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
10/15/2024 12:17:29 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:17:29 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
10/15/2024 12:17:29 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:17:29 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:17:29 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:17:29 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:17:29 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
10/15/2024 12:17:29 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:17:29 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:17:29 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
10/15/2024 12:17:31 PM DEBUG 
End of translate


10/15/2024 12:17:31 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
10/15/2024 12:17:31 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
10/15/2024 12:17:31 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
10/15/2024 12:17:31 PM DEBUG 

Start policy computation

10/15/2024 12:17:31 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
10/15/2024 12:17:31 PM INFO Constructing product automaton with normal DFA!
10/15/2024 12:17:31 PM INFO Product automaton size is: (204, 378)
10/15/2024 12:17:39 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:39 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:17:39 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:39 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:17:39 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:39 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:17:39 PM INFO Trap states were added.
10/15/2024 12:17:39 PM INFO Trap states were added.
10/15/2024 12:17:39 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
10/15/2024 12:17:39 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
10/15/2024 12:17:39 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:39 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:17:39 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
10/15/2024 12:17:39 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:39 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 12:17:39 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:39 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 12:17:39 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:39 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 12:17:39 PM INFO No trap states were added.
10/15/2024 12:17:39 PM INFO No trap states were added.
10/15/2024 12:17:39 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:17:39 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 12:17:39 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
10/15/2024 12:17:39 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
10/15/2024 12:17:39 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
10/15/2024 12:17:39 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
10/15/2024 12:17:39 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 12:17:39 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 12:17:39 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
10/15/2024 12:17:39 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:17:39 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
10/15/2024 12:17:39 PM DEBUG [spec] No of nodes: 40
10/15/2024 12:17:39 PM DEBUG [spec] No of edges: 72
10/15/2024 12:17:39 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 12:17:39 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
10/15/2024 12:17:39 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

10/15/2024 12:17:39 PM DEBUG [spec] No of nodes: 11
10/15/2024 12:17:39 PM DEBUG [spec] No of edges: 24
10/15/2024 12:17:39 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
10/15/2024 12:17:39 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:17:39 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:17:39 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:17:39 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:17:39 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:17:39 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 12:17:39 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
10/15/2024 12:17:39 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
10/15/2024 12:17:39 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:17:39 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:17:39 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
10/15/2024 12:17:39 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 12:17:39 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:17:39 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:17:39 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
10/15/2024 12:17:39 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:17:39 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
10/15/2024 12:17:39 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:17:39 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:17:39 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 12:17:39 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 12:17:39 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
10/15/2024 12:17:39 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 12:17:39 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 12:17:39 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
10/15/2024 12:18:04 PM DEBUG 
End of translate


10/15/2024 12:18:04 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
10/15/2024 12:18:04 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
10/15/2024 12:18:04 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
10/15/2024 12:18:04 PM DEBUG 

Start policy computation

10/15/2024 12:18:04 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
10/15/2024 12:18:04 PM INFO Constructing product automaton with normal DFA!
10/15/2024 12:18:04 PM INFO Product automaton size is: (204, 378)
10/15/2024 01:19:00 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 01:19:00 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 01:19:00 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 01:19:00 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 01:19:00 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 01:19:00 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 01:19:00 PM INFO Trap states were added.
10/15/2024 01:19:00 PM INFO Trap states were added.
10/15/2024 01:19:00 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
10/15/2024 01:19:00 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
10/15/2024 01:19:00 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 01:19:00 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 01:19:00 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
10/15/2024 01:19:00 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 01:19:00 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
10/15/2024 01:19:00 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 01:19:00 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
10/15/2024 01:19:00 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 01:19:00 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
10/15/2024 01:19:00 PM INFO No trap states were added.
10/15/2024 01:19:00 PM INFO No trap states were added.
10/15/2024 01:19:00 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 01:19:00 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
10/15/2024 01:19:00 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
10/15/2024 01:19:00 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
10/15/2024 01:19:00 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
10/15/2024 01:19:00 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
10/15/2024 01:19:00 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
10/15/2024 01:19:00 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
10/15/2024 01:19:00 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
10/15/2024 01:19:00 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 01:19:00 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
10/15/2024 01:19:00 PM DEBUG [spec] No of nodes: 40
10/15/2024 01:19:00 PM DEBUG [spec] No of edges: 72
10/15/2024 01:19:00 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
10/15/2024 01:19:00 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
10/15/2024 01:19:00 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

10/15/2024 01:19:00 PM DEBUG [spec] No of nodes: 11
10/15/2024 01:19:00 PM DEBUG [spec] No of edges: 24
10/15/2024 01:19:00 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
10/15/2024 01:19:00 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 01:19:00 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 01:19:00 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 01:19:00 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 01:19:00 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 01:19:00 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
10/15/2024 01:19:00 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
10/15/2024 01:19:00 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
10/15/2024 01:19:00 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 01:19:00 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 01:19:00 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
10/15/2024 01:19:00 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
10/15/2024 01:19:00 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 01:19:00 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 01:19:00 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
10/15/2024 01:19:00 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 01:19:00 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
10/15/2024 01:19:00 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 01:19:00 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 01:19:00 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
10/15/2024 01:19:00 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
10/15/2024 01:19:00 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
10/15/2024 01:19:00 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
10/15/2024 01:19:00 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
10/15/2024 01:19:01 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
10/15/2024 01:38:53 PM DEBUG 
End of translate


10/15/2024 01:38:53 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
10/15/2024 01:38:53 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
10/15/2024 01:38:53 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
10/15/2024 01:38:53 PM DEBUG 

Start policy computation

10/15/2024 01:38:53 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
10/15/2024 01:38:53 PM INFO Constructing product automaton with normal DFA!
10/15/2024 01:38:53 PM INFO Product automaton size is: (204, 378)
11/13/2024 01:19:06 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:06 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:19:06 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:06 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:19:06 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:06 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:19:06 PM INFO Trap states were added.
11/13/2024 01:19:06 PM INFO Trap states were added.
11/13/2024 01:19:06 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
11/13/2024 01:19:06 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
11/13/2024 01:19:06 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:06 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:19:06 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
11/13/2024 01:19:06 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:06 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:19:06 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:06 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:19:06 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:06 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:19:06 PM INFO No trap states were added.
11/13/2024 01:19:06 PM INFO No trap states were added.
11/13/2024 01:19:06 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:19:06 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:19:06 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
11/13/2024 01:19:06 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
11/13/2024 01:19:06 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
11/13/2024 01:19:06 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
11/13/2024 01:19:06 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:06 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:19:06 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
11/13/2024 01:19:06 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:19:06 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
11/13/2024 01:19:06 PM DEBUG [spec] No of nodes: 40
11/13/2024 01:19:06 PM DEBUG [spec] No of edges: 72
11/13/2024 01:19:06 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:19:06 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
11/13/2024 01:19:06 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

11/13/2024 01:19:06 PM DEBUG [spec] No of nodes: 11
11/13/2024 01:19:06 PM DEBUG [spec] No of edges: 24
11/13/2024 01:19:06 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
11/13/2024 01:19:06 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:19:06 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:19:06 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:19:06 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:19:06 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:19:06 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:19:06 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
11/13/2024 01:19:06 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
11/13/2024 01:19:06 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
11/13/2024 01:19:06 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:19:06 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
11/13/2024 01:19:06 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
11/13/2024 01:19:06 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
11/13/2024 01:19:06 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:19:06 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
11/13/2024 01:19:06 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:19:06 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
11/13/2024 01:19:06 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
11/13/2024 01:19:06 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:19:06 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
11/13/2024 01:19:06 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:19:06 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
11/13/2024 01:19:06 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
11/13/2024 01:19:06 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:19:07 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
11/13/2024 01:19:13 PM DEBUG 
End of translate


11/13/2024 01:19:13 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
11/13/2024 01:19:13 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
11/13/2024 01:19:13 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
11/13/2024 01:19:13 PM DEBUG 

Start policy computation

11/13/2024 01:19:13 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
11/13/2024 01:19:13 PM INFO Constructing product automaton with normal DFA!
11/13/2024 01:19:13 PM INFO Product automaton size is: (204, 378)
11/13/2024 01:19:43 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:43 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:19:43 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:43 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:19:43 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:43 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:19:43 PM INFO Trap states were added.
11/13/2024 01:19:43 PM INFO Trap states were added.
11/13/2024 01:19:43 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
11/13/2024 01:19:43 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
11/13/2024 01:19:43 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:43 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:19:43 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
11/13/2024 01:19:43 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:43 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:19:43 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:43 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:19:43 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:43 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:19:43 PM INFO No trap states were added.
11/13/2024 01:19:43 PM INFO No trap states were added.
11/13/2024 01:19:43 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:19:43 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:19:43 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
11/13/2024 01:19:43 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
11/13/2024 01:19:43 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
11/13/2024 01:19:43 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
11/13/2024 01:19:43 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:19:43 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:19:43 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
11/13/2024 01:19:43 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:19:43 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
11/13/2024 01:19:43 PM DEBUG [spec] No of nodes: 40
11/13/2024 01:19:43 PM DEBUG [spec] No of edges: 72
11/13/2024 01:19:43 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:19:43 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
11/13/2024 01:19:43 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

11/13/2024 01:19:43 PM DEBUG [spec] No of nodes: 11
11/13/2024 01:19:43 PM DEBUG [spec] No of edges: 24
11/13/2024 01:19:43 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
11/13/2024 01:19:43 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:19:43 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:19:43 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:19:43 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:19:43 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:19:43 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:19:43 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
11/13/2024 01:19:43 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
11/13/2024 01:19:43 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
11/13/2024 01:19:43 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:19:43 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
11/13/2024 01:19:43 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
11/13/2024 01:19:43 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
11/13/2024 01:19:43 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:19:43 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
11/13/2024 01:19:43 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:19:43 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
11/13/2024 01:19:43 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
11/13/2024 01:19:43 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:19:43 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
11/13/2024 01:19:43 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:19:43 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
11/13/2024 01:19:43 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
11/13/2024 01:19:43 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:19:43 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
11/13/2024 01:20:46 PM DEBUG 
End of translate


11/13/2024 01:20:46 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
11/13/2024 01:20:46 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
11/13/2024 01:20:46 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
11/13/2024 01:20:46 PM DEBUG 

Start policy computation

11/13/2024 01:20:46 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
11/13/2024 01:20:46 PM INFO Constructing product automaton with normal DFA!
11/13/2024 01:20:46 PM INFO Product automaton size is: (204, 378)
11/13/2024 01:44:08 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:08 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:44:08 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:08 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:44:08 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:08 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:44:08 PM INFO Trap states were added.
11/13/2024 01:44:08 PM INFO Trap states were added.
11/13/2024 01:44:08 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
11/13/2024 01:44:08 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
11/13/2024 01:44:08 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:08 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:44:08 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
11/13/2024 01:44:08 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:08 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:44:08 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:08 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:44:08 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:08 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:44:08 PM INFO No trap states were added.
11/13/2024 01:44:08 PM INFO No trap states were added.
11/13/2024 01:44:08 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:44:08 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:44:08 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
11/13/2024 01:44:08 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
11/13/2024 01:44:08 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
11/13/2024 01:44:08 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
11/13/2024 01:44:08 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:08 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:44:08 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
11/13/2024 01:44:08 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:44:08 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
11/13/2024 01:44:08 PM DEBUG [spec] No of nodes: 40
11/13/2024 01:44:08 PM DEBUG [spec] No of edges: 72
11/13/2024 01:44:08 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:44:08 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
11/13/2024 01:44:08 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

11/13/2024 01:44:08 PM DEBUG [spec] No of nodes: 11
11/13/2024 01:44:08 PM DEBUG [spec] No of edges: 24
11/13/2024 01:44:08 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
11/13/2024 01:44:08 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:44:08 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:44:08 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:44:08 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:44:08 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:44:08 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:44:08 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
11/13/2024 01:44:08 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
11/13/2024 01:44:08 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
11/13/2024 01:44:08 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:44:08 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
11/13/2024 01:44:08 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
11/13/2024 01:44:08 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
11/13/2024 01:44:08 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:44:08 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
11/13/2024 01:44:08 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:44:08 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
11/13/2024 01:44:08 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
11/13/2024 01:44:08 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:44:08 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
11/13/2024 01:44:08 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:44:08 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
11/13/2024 01:44:08 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
11/13/2024 01:44:08 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:44:08 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
11/13/2024 01:44:13 PM DEBUG 
End of translate


11/13/2024 01:44:13 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
11/13/2024 01:44:13 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
11/13/2024 01:44:13 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
11/13/2024 01:44:13 PM DEBUG 

Start policy computation

11/13/2024 01:44:13 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
11/13/2024 01:44:13 PM INFO Constructing product automaton with normal DFA!
11/13/2024 01:44:13 PM INFO Product automaton size is: (204, 378)
11/13/2024 01:44:30 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
11/13/2024 01:44:30 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
11/13/2024 01:44:30 PM DEBUG [spec] spec: [H^1 A]^[1, 2]
11/13/2024 01:44:30 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
11/13/2024 01:44:30 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

11/13/2024 01:44:30 PM DEBUG [spec] No of nodes: 4
11/13/2024 01:44:30 PM DEBUG [spec] No of edges: 5
11/13/2024 01:44:30 PM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
11/13/2024 01:44:30 PM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
11/13/2024 01:44:30 PM INFO Trap states were added.
11/13/2024 01:44:30 PM INFO Constructing product automaton with infinity DFA!
11/13/2024 01:44:30 PM INFO Product automaton size is: (8, 10)
11/13/2024 01:44:30 PM INFO The result of the verification procedure is True!
11/13/2024 01:44:30 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
11/13/2024 01:44:30 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
11/13/2024 01:44:30 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
11/13/2024 01:44:30 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
11/13/2024 01:44:30 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

11/13/2024 01:44:30 PM DEBUG [spec] No of nodes: 6
11/13/2024 01:44:30 PM DEBUG [spec] No of edges: 9
11/13/2024 01:44:30 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
11/13/2024 01:44:30 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
11/13/2024 01:44:30 PM INFO Trap states were added.
11/13/2024 01:44:30 PM INFO Constructing product automaton with infinity DFA!
11/13/2024 01:44:30 PM INFO Product automaton size is: (10, 14)
11/13/2024 01:44:30 PM INFO The result of the verification procedure is False!
11/13/2024 01:44:30 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A', 'B'])
11/13/2024 01:44:30 PM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 A )
11/13/2024 01:44:30 PM DEBUG [hold] Prop: B Duration: 2 Negation: False Props: set(['A', 'B'])
11/13/2024 01:44:30 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 B )
11/13/2024 01:44:30 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A ) 0 2 ) DFA2: (Eventually (Hold 2 B ) 0 3 )
11/13/2024 01:44:30 PM DEBUG [spec] spec: [H^1 A]^[0, 2] * [H^2 B]^[0, 3]
11/13/2024 01:44:30 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A ) 0 2 ) (Eventually (Hold 2 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 2, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (3, 2, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 2, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
11/13/2024 01:44:30 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([5])

11/13/2024 01:44:30 PM DEBUG [spec] No of nodes: 6
11/13/2024 01:44:30 PM DEBUG [spec] No of edges: 10
11/13/2024 01:44:30 PM DEBUG Tight deadlines for positive traces: [[1, 3], [2, 3]]
11/13/2024 01:44:30 PM DEBUG Tight deadlines for negative traces: [[3, 2], [2, 4]]
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 1, MCR: 1, FP: [], FN: [2]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 1, MCR: 1
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 2, MCR: 1, FP: [2], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 1, MCR: 1
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 3, MCR: 2, FP: [3, 2], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 1, MCR: 1
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 2, MCR: 3, FP: [2], FN: [3, 3]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 3, MCR: 2
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 3, MCR: 1, FP: [2], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 1, MCR: 3
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 4, MCR: 2, FP: [2, 4], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 1, MCR: 3
11/13/2024 01:44:30 PM INFO The inferred deadlines are: [1, 3] with misclassification rate: 1
11/13/2024 01:44:30 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B'])
11/13/2024 01:44:30 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 2 A )
11/13/2024 01:44:30 PM DEBUG [hold] Prop: B Duration: 3 Negation: False Props: set(['A', 'C', 'B'])
11/13/2024 01:44:30 PM DEBUG [eventually] Low: 2 High: 6 DFA: (Hold 3 B )
11/13/2024 01:44:30 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 4 ) DFA2: (Eventually (Hold 3 B ) 2 6 )
11/13/2024 01:44:30 PM DEBUG [hold] Prop: C Duration: 2 Negation: False Props: set(['A', 'C', 'B'])
11/13/2024 01:44:30 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 C )
11/13/2024 01:44:30 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 4 ) (Eventually (Hold 3 B ) 2 6 ) ) DFA2: (Eventually (Hold 2 C ) 0 3 )
11/13/2024 01:44:30 PM DEBUG [spec] spec: [H^2 A]^[0, 4] * [H^3 B]^[2, 6] * [H^2 C]^[0, 3]
11/13/2024 01:44:30 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 4 ) (Eventually (Hold 3 B ) 2 6 ) ) (Eventually (Hold 2 C ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7]) 
Initial: [0]
Final: set([12])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 9, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (4, 4, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([4, 5, 6, 7]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (5, 4, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([4, 5, 6, 7]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (6, 4, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([4, 5, 6, 7]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (7, 8, {'input': set([4, 5, 6, 7]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (7, 4, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 8, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 10, {'input': set([2, 3, 6, 7]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (9, 4, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (10, 8, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([2, 3, 6, 7]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (11, 8, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (11, 12, {'input': set([2, 3, 6, 7]), 'guard': u'C', 'weight': 0, 'label': u'C'})]
		
11/13/2024 01:44:30 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([12])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([8])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([8])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([4])
       Final: set([8])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([8])
   Final: set([12])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([8])
     Final: set([12])

11/13/2024 01:44:30 PM DEBUG [spec] No of nodes: 13
11/13/2024 01:44:30 PM DEBUG [spec] No of edges: 22
11/13/2024 01:44:30 PM DEBUG Tight deadlines for positive traces: [[16, 23, 16], [5, 22, 50], [15, 14, 10], [15, 17, 2], [7, 24, 9], [2, 22, 28], [49, 5, 9], [19, 42, 12], [6, 12, 16], [13, 11, 12], [30, 12, 4], [21, 10, 2], [11, 17, 6], [24, 14, 24], [2, 9, 6], [10, 16, 2], [2, 32, 11], [2, 21, 16], [9, 34, 9], [8, 15, 13], [34, 20, 2], [21, 18, 9], [2, 14, 18], [26, 13, 2], [2, 36, 16], [2, 9, 51], [35, 11, 10], [2, 21, 31], [2, 30, 25], [8, 5, 19], [3, 22, 33], [29, 6, 15], [9, 40, 14], [2, 20, 7], [5, 15, 13], [7, 26, 7], [6, 7, 14], [9, 7, 25], [9, 45, 3], [4, 7, 31], [10, 5, 12], [3, 8, 4], [25, 17, 12], [7, 43, 5], [3, 17, 15], [6, 18, 19], [8, 41, 7], [47, 6, 17], [16, 14, 26], [2, 15, 30]]
11/13/2024 01:44:30 PM DEBUG Tight deadlines for negative traces: [[36, 19, 4], [31, 18, 19], [49, 41, 25], [56, 8, 21], [89, 127, 12], [30, 21, 95], [35, 110, 12], [41, 108, 6], [68, 6, 91], [2, 106, 9], [73, 5, 9], [14, 25, 37], [10, 156, 7], [34, 10, 67], [7, 184, 37], [56, 41, 21], [10, 47, 37], [21, 22, 24], [35, 48, 6], [12, 101, 33], [14, 15, 36], [114, 16, 5], [5, 140, 17], [22, 20, 39], [2, 55, 8], [41, 51, 18], [12, 61, 9], [6, 41, 35], [49, 5, 43], [102, 5, 5], [71, 26, 46], [33, 28, 19], [61, 5, 11], [91, 5, 45], [63, 18, 3], [43, 44, 14], [116, 5, 11], [2, 117, 6], [87, 10, 39], [30, 8, 87], [20, 12, 78], [13, 23, 25], [2, 33, 106], [12, 7, 117], [3, 57, 46], [31, 45, 25], [21, 5, 56], [4, 92, 25], [5, 27, 48], [12, 6, 93]]
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 2, MCR: 43, FP: [2, 2, 2, 2], FN: [16, 5, 15, 15, 7, 49, 19, 6, 13, 30, 21, 11, 24, 10, 9, 8, 34, 21, 26, 35, 8, 3, 29, 9, 5, 7, 6, 9, 9, 4, 10, 3, 25, 7, 3, 6, 8, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 43, MCR: 2
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 3, MCR: 41, FP: [2, 2, 2, 2, 3], FN: [16, 5, 15, 15, 7, 49, 19, 6, 13, 30, 21, 11, 24, 10, 9, 8, 34, 21, 26, 35, 8, 29, 9, 5, 7, 6, 9, 9, 4, 10, 25, 7, 6, 8, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 41, MCR: 3
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 4, MCR: 41, FP: [2, 2, 2, 2, 3, 4], FN: [16, 5, 15, 15, 7, 49, 19, 6, 13, 30, 21, 11, 24, 10, 9, 8, 34, 21, 26, 35, 8, 29, 9, 5, 7, 6, 9, 9, 10, 25, 7, 6, 8, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 41, MCR: 3
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 5, MCR: 41, FP: [2, 5, 2, 2, 2, 3, 4, 5], FN: [16, 15, 15, 7, 49, 19, 6, 13, 30, 21, 11, 24, 10, 9, 8, 34, 21, 26, 35, 8, 29, 9, 7, 6, 9, 9, 10, 25, 7, 6, 8, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 41, MCR: 3
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 6, MCR: 39, FP: [2, 5, 2, 6, 2, 2, 3, 4, 5], FN: [16, 15, 15, 7, 49, 19, 13, 30, 21, 11, 24, 10, 9, 8, 34, 21, 26, 35, 8, 29, 9, 7, 9, 9, 10, 25, 7, 8, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 39, MCR: 6
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 7, MCR: 37, FP: [2, 7, 5, 2, 6, 2, 2, 3, 4, 5], FN: [16, 15, 15, 49, 19, 13, 30, 21, 11, 24, 10, 9, 8, 34, 21, 26, 35, 8, 29, 9, 9, 9, 10, 25, 8, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 37, MCR: 7
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 8, MCR: 34, FP: [2, 7, 5, 2, 6, 2, 2, 3, 4, 5], FN: [16, 15, 15, 49, 19, 13, 30, 21, 11, 24, 10, 9, 34, 21, 26, 35, 29, 9, 9, 9, 10, 25, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 34, MCR: 8
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 9, MCR: 30, FP: [2, 7, 5, 2, 6, 2, 2, 3, 4, 5], FN: [16, 15, 15, 49, 19, 13, 30, 21, 11, 24, 10, 34, 21, 26, 35, 29, 10, 25, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 30, MCR: 9
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 10, MCR: 30, FP: [2, 10, 7, 10, 5, 2, 6, 2, 2, 3, 4, 5], FN: [16, 15, 15, 49, 19, 13, 30, 21, 11, 24, 34, 21, 26, 35, 29, 25, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 30, MCR: 9
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 11, MCR: 29, FP: [2, 10, 7, 10, 5, 2, 6, 2, 2, 3, 4, 5], FN: [16, 15, 15, 49, 19, 13, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 12, MCR: 33, FP: [2, 10, 7, 10, 12, 5, 2, 12, 6, 2, 2, 12, 3, 4, 5, 12], FN: [16, 15, 15, 49, 19, 13, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 13, MCR: 33, FP: [2, 10, 7, 10, 12, 5, 2, 12, 6, 2, 13, 2, 12, 3, 4, 5, 12], FN: [16, 15, 15, 49, 19, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 14, MCR: 35, FP: [2, 14, 10, 7, 10, 12, 14, 5, 2, 12, 6, 2, 13, 2, 12, 3, 4, 5, 12], FN: [16, 15, 15, 49, 19, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 15, MCR: 33, FP: [2, 14, 10, 7, 10, 12, 14, 5, 2, 12, 6, 2, 13, 2, 12, 3, 4, 5, 12], FN: [16, 49, 19, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47, 16]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 16, MCR: 31, FP: [2, 14, 10, 7, 10, 12, 14, 5, 2, 12, 6, 2, 13, 2, 12, 3, 4, 5, 12], FN: [49, 19, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 19, MCR: 30, FP: [2, 14, 10, 7, 10, 12, 14, 5, 2, 12, 6, 2, 13, 2, 12, 3, 4, 5, 12], FN: [49, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 20, MCR: 31, FP: [2, 14, 10, 7, 10, 12, 14, 5, 2, 12, 6, 2, 20, 13, 2, 12, 3, 4, 5, 12], FN: [49, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 21, MCR: 31, FP: [2, 14, 10, 7, 10, 21, 12, 14, 5, 2, 12, 6, 2, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 30, 24, 34, 26, 35, 29, 25, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 22, MCR: 32, FP: [2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 30, 24, 34, 26, 35, 29, 25, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 24, MCR: 31, FP: [2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 30, 34, 26, 35, 29, 25, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 25, MCR: 30, FP: [2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 30, 34, 26, 35, 29, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 26, MCR: 29, FP: [2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 30, 34, 35, 29, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 29, MCR: 28, FP: [2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 30, 34, 35, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 30, MCR: 29, FP: [30, 2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 30, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 34, 35, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 31, MCR: 31, FP: [31, 30, 2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 34, 35, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 33, MCR: 32, FP: [31, 30, 2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 33, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 34, 35, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 34, MCR: 32, FP: [31, 30, 2, 14, 10, 34, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 33, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 35, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 35, MCR: 33, FP: [31, 30, 35, 2, 14, 10, 34, 7, 10, 21, 35, 12, 14, 5, 22, 2, 12, 6, 33, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 36, MCR: 34, FP: [36, 31, 30, 35, 2, 14, 10, 34, 7, 10, 21, 35, 12, 14, 5, 22, 2, 12, 6, 33, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 41, MCR: 36, FP: [36, 31, 30, 35, 41, 2, 14, 10, 34, 7, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 33, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 43, MCR: 37, FP: [36, 31, 30, 35, 41, 2, 14, 10, 34, 7, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 33, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 47]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 47, MCR: 36, FP: [36, 31, 30, 35, 41, 2, 14, 10, 34, 7, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 33, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 49, MCR: 37, FP: [36, 31, 49, 30, 35, 41, 2, 14, 10, 34, 7, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 33, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 56, MCR: 39, FP: [36, 31, 49, 56, 30, 35, 41, 2, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 33, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 61, MCR: 40, FP: [36, 31, 49, 56, 30, 35, 41, 2, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 33, 61, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 63, MCR: 41, FP: [36, 31, 49, 56, 30, 35, 41, 2, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 33, 61, 63, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 68, MCR: 42, FP: [36, 31, 49, 56, 30, 35, 41, 68, 2, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 33, 61, 63, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 71, MCR: 43, FP: [36, 31, 49, 56, 30, 35, 41, 68, 2, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 71, 33, 61, 63, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 73, MCR: 44, FP: [36, 31, 49, 56, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 71, 33, 61, 63, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 87, MCR: 45, FP: [36, 31, 49, 56, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 71, 33, 61, 63, 43, 2, 87, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 89, MCR: 46, FP: [36, 31, 49, 56, 89, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 71, 33, 61, 63, 43, 2, 87, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 91, MCR: 47, FP: [36, 31, 49, 56, 89, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 71, 33, 61, 91, 63, 43, 2, 87, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 102, MCR: 48, FP: [36, 31, 49, 56, 89, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 102, 71, 33, 61, 91, 63, 43, 2, 87, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 114, MCR: 49, FP: [36, 31, 49, 56, 89, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 114, 5, 22, 2, 41, 12, 6, 49, 102, 71, 33, 61, 91, 63, 43, 2, 87, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 0, value 116, MCR: 50, FP: [36, 31, 49, 56, 89, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 114, 5, 22, 2, 41, 12, 6, 49, 102, 71, 33, 61, 91, 63, 43, 116, 2, 87, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 5, MCR: 54, FP: [5, 5, 5, 5, 5, 5, 5], FN: [23, 22, 14, 17, 24, 22, 42, 12, 11, 12, 10, 17, 14, 9, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 9, 11, 21, 30, 22, 6, 40, 20, 15, 26, 7, 7, 45, 7, 8, 17, 43, 17, 18, 41, 6, 14, 15]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 54, MCR: 5
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 6, MCR: 54, FP: [6, 5, 5, 5, 5, 5, 5, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 12, 11, 12, 10, 17, 14, 9, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 9, 11, 21, 30, 22, 40, 20, 15, 26, 7, 7, 45, 7, 8, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 54, MCR: 5
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 7, MCR: 52, FP: [6, 5, 5, 5, 5, 5, 5, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 12, 11, 12, 10, 17, 14, 9, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 9, 11, 21, 30, 22, 40, 20, 15, 26, 45, 8, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 52, MCR: 7
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 8, MCR: 53, FP: [8, 6, 5, 5, 5, 5, 5, 5, 8, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 12, 11, 12, 10, 17, 14, 9, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 9, 11, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 52, MCR: 7
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 9, MCR: 51, FP: [8, 6, 5, 5, 5, 5, 5, 5, 8, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 12, 11, 12, 10, 17, 14, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 11, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 51, MCR: 9
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 10, MCR: 52, FP: [8, 6, 5, 10, 5, 5, 5, 5, 5, 10, 8, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 12, 11, 12, 17, 14, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 11, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 51, MCR: 9
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 11, MCR: 50, FP: [8, 6, 5, 10, 5, 5, 5, 5, 5, 10, 8, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 12, 12, 17, 14, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 50, MCR: 11
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 12, MCR: 49, FP: [8, 6, 5, 10, 5, 5, 5, 5, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 17, 14, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 49, MCR: 12
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 13, MCR: 48, FP: [8, 6, 5, 10, 5, 5, 5, 5, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 17, 14, 16, 32, 21, 34, 15, 20, 18, 14, 36, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 48, MCR: 13
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 14, MCR: 44, FP: [8, 6, 5, 10, 5, 5, 5, 5, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 17, 24, 22, 42, 17, 16, 32, 21, 34, 15, 20, 18, 36, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 15]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 44, MCR: 14
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 15, MCR: 42, FP: [8, 6, 5, 10, 15, 5, 5, 5, 5, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 17, 24, 22, 42, 17, 16, 32, 21, 34, 20, 18, 36, 21, 30, 22, 40, 20, 26, 45, 17, 43, 17, 18, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 42, MCR: 15
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 16, MCR: 42, FP: [8, 6, 5, 10, 15, 16, 5, 5, 5, 5, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 17, 24, 22, 42, 17, 32, 21, 34, 20, 18, 36, 21, 30, 22, 40, 20, 26, 45, 17, 43, 17, 18, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 42, MCR: 15
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 17, MCR: 38, FP: [8, 6, 5, 10, 15, 16, 5, 5, 5, 5, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 24, 22, 42, 32, 21, 34, 20, 18, 36, 21, 30, 22, 40, 20, 26, 45, 43, 18, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 38, MCR: 17
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 18, MCR: 38, FP: [18, 8, 6, 5, 10, 15, 16, 5, 5, 5, 5, 18, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 24, 22, 42, 32, 21, 34, 20, 36, 21, 30, 22, 40, 20, 26, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 38, MCR: 17
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 19, MCR: 39, FP: [19, 18, 8, 6, 5, 10, 15, 16, 5, 5, 5, 5, 18, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 24, 22, 42, 32, 21, 34, 20, 36, 21, 30, 22, 40, 20, 26, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 38, MCR: 17
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 20, MCR: 38, FP: [19, 18, 8, 6, 5, 10, 15, 16, 20, 5, 5, 5, 5, 18, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 24, 22, 42, 32, 21, 34, 36, 21, 30, 22, 40, 26, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 38, MCR: 17
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 21, MCR: 37, FP: [19, 18, 8, 21, 6, 5, 10, 15, 16, 20, 5, 5, 5, 5, 18, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 24, 22, 42, 32, 34, 36, 30, 22, 40, 26, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 37, MCR: 21
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 22, MCR: 35, FP: [19, 18, 8, 21, 6, 5, 10, 22, 15, 16, 20, 5, 5, 5, 5, 18, 5, 10, 8, 12, 7, 5, 6], FN: [23, 24, 42, 32, 34, 36, 30, 40, 26, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 35, MCR: 22
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 23, MCR: 35, FP: [19, 18, 8, 21, 6, 5, 10, 22, 15, 16, 20, 5, 5, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 6], FN: [24, 42, 32, 34, 36, 30, 40, 26, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 35, MCR: 22
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 24, MCR: 34, FP: [19, 18, 8, 21, 6, 5, 10, 22, 15, 16, 20, 5, 5, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 6], FN: [42, 32, 34, 36, 30, 40, 26, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 25, MCR: 35, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 6], FN: [42, 32, 34, 36, 30, 40, 26, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 26, MCR: 35, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 6], FN: [42, 32, 34, 36, 30, 40, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 27, MCR: 36, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 27, 6], FN: [42, 32, 34, 36, 30, 40, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 28, MCR: 37, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 27, 6], FN: [42, 32, 34, 36, 30, 40, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 30, MCR: 36, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 27, 6], FN: [42, 32, 34, 36, 40, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 32, MCR: 35, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 27, 6], FN: [42, 34, 36, 40, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 33, MCR: 36, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [42, 34, 36, 40, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 34, MCR: 35, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [42, 36, 40, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 36, MCR: 34, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [42, 40, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 40, MCR: 33, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [42, 45, 43, 41]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 41, MCR: 35, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 22, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [42, 45, 43]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 42, MCR: 34, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 22, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [45, 43]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 43, MCR: 33, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 22, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [45]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 44, MCR: 34, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 22, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [45]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 45, MCR: 34, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 22, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 45, 5, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 47, MCR: 35, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 45, 5, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 48, MCR: 36, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 45, 5, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 51, MCR: 37, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 15, 16, 20, 51, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 45, 5, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 55, MCR: 38, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 15, 16, 20, 55, 51, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 45, 5, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 57, MCR: 39, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 15, 16, 20, 55, 51, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 61, MCR: 40, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 92, MCR: 41, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 101, MCR: 42, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 106, MCR: 43, FP: [19, 18, 41, 8, 21, 6, 106, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 108, MCR: 44, FP: [19, 18, 41, 8, 21, 108, 6, 106, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 110, MCR: 45, FP: [19, 18, 41, 8, 21, 110, 108, 6, 106, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 117, MCR: 46, FP: [19, 18, 41, 8, 21, 110, 108, 6, 106, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 117, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 127, MCR: 47, FP: [19, 18, 41, 8, 127, 21, 110, 108, 6, 106, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 117, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 140, MCR: 48, FP: [19, 18, 41, 8, 127, 21, 110, 108, 6, 106, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 140, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 117, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 156, MCR: 49, FP: [19, 18, 41, 8, 127, 21, 110, 108, 6, 106, 5, 25, 156, 10, 41, 47, 22, 48, 101, 15, 16, 140, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 117, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 1, value 184, MCR: 50, FP: [19, 18, 41, 8, 127, 21, 110, 108, 6, 106, 5, 25, 156, 10, 184, 41, 47, 22, 48, 101, 15, 16, 140, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 117, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 2, MCR: 45, FP: [], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 4, 6, 24, 6, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 7, 13, 7, 14, 25, 3, 31, 12, 4, 12, 5, 15, 19, 7, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 45, MCR: 2
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 3, MCR: 45, FP: [3], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 4, 6, 24, 6, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 7, 13, 7, 14, 25, 31, 12, 4, 12, 5, 15, 19, 7, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 45, MCR: 2
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 4, MCR: 44, FP: [4, 3], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 6, 24, 6, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 7, 13, 7, 14, 25, 31, 12, 12, 5, 15, 19, 7, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 44, MCR: 4
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 5, MCR: 45, FP: [4, 5, 5, 3], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 6, 24, 6, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 7, 13, 7, 14, 25, 31, 12, 12, 15, 19, 7, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 44, MCR: 4
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 6, MCR: 46, FP: [4, 6, 6, 5, 5, 3, 6], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 24, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 7, 13, 7, 14, 25, 31, 12, 12, 15, 19, 7, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 44, MCR: 4
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 7, MCR: 44, FP: [4, 6, 7, 6, 5, 5, 3, 6], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 24, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 13, 14, 25, 31, 12, 12, 15, 19, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 44, MCR: 4
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 8, MCR: 45, FP: [4, 6, 7, 6, 5, 8, 5, 3, 6], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 24, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 13, 14, 25, 31, 12, 12, 15, 19, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 44, MCR: 4
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 9, MCR: 44, FP: [4, 6, 9, 9, 7, 6, 5, 8, 9, 5, 3, 6], FN: [16, 50, 10, 28, 12, 16, 12, 24, 11, 16, 13, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 13, 14, 25, 31, 12, 12, 15, 19, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 44, MCR: 4
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 10, MCR: 42, FP: [4, 6, 9, 9, 7, 6, 5, 8, 9, 5, 3, 6], FN: [16, 50, 28, 12, 16, 12, 24, 11, 16, 13, 18, 16, 51, 31, 25, 19, 33, 15, 14, 13, 14, 25, 31, 12, 12, 15, 19, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 42, MCR: 10
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 11, MCR: 43, FP: [4, 6, 9, 9, 7, 6, 5, 8, 9, 5, 11, 3, 11, 6], FN: [16, 50, 28, 12, 16, 12, 24, 16, 13, 18, 16, 51, 31, 25, 19, 33, 15, 14, 13, 14, 25, 31, 12, 12, 15, 19, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 42, MCR: 10
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 12, MCR: 41, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 8, 9, 5, 11, 3, 11, 6], FN: [16, 50, 28, 16, 24, 16, 13, 18, 16, 51, 31, 25, 19, 33, 15, 14, 13, 14, 25, 31, 15, 19, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 41, MCR: 12
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 13, MCR: 39, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 8, 9, 5, 11, 3, 11, 6], FN: [16, 50, 28, 16, 24, 16, 18, 16, 51, 31, 25, 19, 33, 15, 14, 14, 25, 31, 15, 19, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 39, MCR: 13
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 14, MCR: 38, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 8, 9, 5, 11, 3, 14, 11, 6], FN: [16, 50, 28, 16, 24, 16, 18, 16, 51, 31, 25, 19, 33, 15, 25, 31, 15, 19, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 38, MCR: 14
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 15, MCR: 36, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 8, 9, 5, 11, 3, 14, 11, 6], FN: [16, 50, 28, 16, 24, 16, 18, 16, 51, 31, 25, 19, 33, 25, 31, 19, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 36, MCR: 15
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 16, MCR: 32, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 8, 9, 5, 11, 3, 14, 11, 6], FN: [50, 28, 24, 18, 51, 31, 25, 19, 33, 25, 31, 19, 17, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 17, MCR: 32, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 17, 8, 9, 5, 11, 3, 14, 11, 6], FN: [50, 28, 24, 18, 51, 31, 25, 19, 33, 25, 31, 19, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 18, MCR: 32, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 17, 8, 18, 9, 5, 11, 3, 14, 11, 6], FN: [50, 28, 24, 51, 31, 25, 19, 33, 25, 31, 19, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 19, MCR: 32, FP: [4, 19, 12, 12, 6, 9, 9, 7, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6], FN: [50, 28, 24, 51, 31, 25, 33, 25, 31, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 21, MCR: 34, FP: [4, 19, 21, 12, 12, 6, 9, 9, 7, 21, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6], FN: [50, 28, 24, 51, 31, 25, 33, 25, 31, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 24, MCR: 34, FP: [4, 19, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6], FN: [50, 28, 51, 31, 25, 33, 25, 31, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 25, MCR: 36, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 28, 51, 31, 33, 31, 26, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 26, MCR: 35, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 28, 51, 31, 33, 31, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 28, MCR: 34, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51, 31, 33, 31, 30]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 30, MCR: 33, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51, 31, 33, 31]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 31, MCR: 31, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51, 33]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 33, MCR: 31, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 33, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 35, MCR: 32, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 33, 5, 17, 8, 18, 9, 35, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 36, MCR: 33, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 33, 36, 5, 17, 8, 18, 9, 35, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 37, MCR: 36, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 8, 18, 9, 35, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 39, MCR: 38, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 5, 19, 11, 3, 14, 11, 6, 39, 25, 25, 25], FN: [50, 51]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 43, MCR: 39, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 19, 11, 3, 14, 11, 6, 39, 25, 25, 25], FN: [50, 51]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 45, MCR: 40, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 19, 11, 45, 3, 14, 11, 6, 39, 25, 25, 25], FN: [50, 51]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 46, MCR: 42, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 25, 46, 25, 25], FN: [50, 51]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 48, MCR: 43, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 25, 46, 25, 25, 48], FN: [50, 51]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 50, MCR: 42, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 25, 46, 25, 25, 48], FN: [51]
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 51, MCR: 41, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 25, 46, 25, 25, 48], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 56, MCR: 42, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 25, 46, 25, 56, 25, 48], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 67, MCR: 43, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 25, 46, 25, 56, 25, 48], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 78, MCR: 44, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 78, 25, 46, 25, 56, 25, 48], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 87, MCR: 45, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 87, 78, 25, 46, 25, 56, 25, 48], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 91, MCR: 46, FP: [4, 19, 25, 21, 12, 12, 6, 91, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 87, 78, 25, 46, 25, 56, 25, 48], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 93, MCR: 47, FP: [4, 19, 25, 21, 12, 12, 6, 91, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 87, 78, 25, 46, 25, 56, 25, 48, 93], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 95, MCR: 48, FP: [4, 19, 25, 21, 12, 95, 12, 6, 91, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 87, 78, 25, 46, 25, 56, 25, 48, 93], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 106, MCR: 49, FP: [4, 19, 25, 21, 12, 95, 12, 6, 91, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 87, 78, 25, 106, 46, 25, 56, 25, 48, 93], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM DEBUG Deadline id: 2, value 117, MCR: 50, FP: [4, 19, 25, 21, 12, 95, 12, 6, 91, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 87, 78, 25, 106, 117, 46, 25, 56, 25, 48, 93], FN: []
11/13/2024 01:44:30 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:44:30 PM INFO The inferred deadlines are: [29, 40, 31] with misclassification rate: 14
11/13/2024 01:44:37 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:37 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:44:37 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:37 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:44:37 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:37 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:44:37 PM INFO Trap states were added.
11/13/2024 01:44:37 PM INFO Trap states were added.
11/13/2024 01:44:37 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
11/13/2024 01:44:37 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
11/13/2024 01:44:37 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:37 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:44:37 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
11/13/2024 01:44:37 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:37 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:44:37 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:37 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:44:37 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:37 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:44:37 PM INFO No trap states were added.
11/13/2024 01:44:37 PM INFO No trap states were added.
11/13/2024 01:44:37 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:44:37 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:44:37 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
11/13/2024 01:44:37 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
11/13/2024 01:44:37 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
11/13/2024 01:44:37 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
11/13/2024 01:44:37 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:44:37 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:44:37 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
11/13/2024 01:44:37 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:44:37 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
11/13/2024 01:44:37 PM DEBUG [spec] No of nodes: 40
11/13/2024 01:44:37 PM DEBUG [spec] No of edges: 72
11/13/2024 01:44:37 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:44:37 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
11/13/2024 01:44:37 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

11/13/2024 01:44:37 PM DEBUG [spec] No of nodes: 11
11/13/2024 01:44:37 PM DEBUG [spec] No of edges: 24
11/13/2024 01:44:37 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
11/13/2024 01:44:37 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:44:37 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:44:37 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:44:37 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:44:37 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:44:37 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:44:37 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
11/13/2024 01:44:37 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
11/13/2024 01:44:37 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
11/13/2024 01:44:37 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:44:37 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
11/13/2024 01:44:37 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
11/13/2024 01:44:37 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
11/13/2024 01:44:37 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:44:37 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
11/13/2024 01:44:37 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:44:37 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
11/13/2024 01:44:37 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
11/13/2024 01:44:37 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:44:37 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
11/13/2024 01:44:37 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:44:37 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
11/13/2024 01:44:37 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
11/13/2024 01:44:37 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:44:37 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
11/13/2024 01:44:44 PM DEBUG 
End of translate


11/13/2024 01:44:44 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
11/13/2024 01:44:44 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
11/13/2024 01:44:44 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
11/13/2024 01:44:44 PM DEBUG 

Start policy computation

11/13/2024 01:44:44 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
11/13/2024 01:44:44 PM INFO Constructing product automaton with normal DFA!
11/13/2024 01:44:44 PM INFO Product automaton size is: (204, 378)
11/13/2024 01:47:35 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:47:35 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:47:35 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:47:35 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:47:35 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:47:35 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:47:35 PM INFO Trap states were added.
11/13/2024 01:47:35 PM INFO Trap states were added.
11/13/2024 01:47:35 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
11/13/2024 01:47:35 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
11/13/2024 01:47:35 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:47:35 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:47:35 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
11/13/2024 01:47:35 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:47:35 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:47:35 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:47:35 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:47:35 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:47:35 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:47:35 PM INFO No trap states were added.
11/13/2024 01:47:35 PM INFO No trap states were added.
11/13/2024 01:47:35 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:47:35 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:47:35 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
11/13/2024 01:47:35 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
11/13/2024 01:47:35 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
11/13/2024 01:47:35 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
11/13/2024 01:47:35 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:47:35 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:47:35 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
11/13/2024 01:47:35 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:47:35 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
11/13/2024 01:47:35 PM DEBUG [spec] No of nodes: 40
11/13/2024 01:47:35 PM DEBUG [spec] No of edges: 72
11/13/2024 01:47:35 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:47:35 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
11/13/2024 01:47:35 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

11/13/2024 01:47:35 PM DEBUG [spec] No of nodes: 11
11/13/2024 01:47:35 PM DEBUG [spec] No of edges: 24
11/13/2024 01:47:35 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
11/13/2024 01:47:35 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:47:35 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:47:35 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:47:35 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:47:35 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:47:35 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:47:35 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
11/13/2024 01:47:35 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
11/13/2024 01:47:35 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
11/13/2024 01:47:35 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:47:35 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
11/13/2024 01:47:35 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
11/13/2024 01:47:35 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
11/13/2024 01:47:35 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:47:35 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
11/13/2024 01:47:35 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:47:35 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
11/13/2024 01:47:35 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
11/13/2024 01:47:35 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:47:35 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
11/13/2024 01:47:35 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:47:35 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
11/13/2024 01:47:35 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
11/13/2024 01:47:35 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:47:35 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
11/13/2024 01:47:37 PM DEBUG 
End of translate


11/13/2024 01:47:37 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
11/13/2024 01:47:37 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
11/13/2024 01:47:37 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
11/13/2024 01:47:37 PM DEBUG 

Start policy computation

11/13/2024 01:47:37 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
11/13/2024 01:47:37 PM INFO Constructing product automaton with normal DFA!
11/13/2024 01:47:37 PM INFO Product automaton size is: (204, 378)
11/13/2024 01:47:37 PM INFO Max deadline: None
11/13/2024 01:47:37 PM INFO No control policy found!
11/13/2024 01:47:37 PM INFO Constructing product automaton with infinity DFA!
11/13/2024 01:47:37 PM INFO Product automaton size is: (84, 211)
11/13/2024 01:47:37 PM DEBUG (18, 0) -> [('A', 1), (18, 0)]
11/13/2024 01:47:37 PM DEBUG (4, 7) -> [(4, 7), (5, 7)]
11/13/2024 01:47:37 PM DEBUG (17, 5) -> [(17, 5), (18, 5)]
11/13/2024 01:47:37 PM DEBUG (3, 0) -> [(3, 0), ('B', 0)]
11/13/2024 01:47:37 PM DEBUG (8, 0) -> [(9, 0), (8, 0)]
11/13/2024 01:47:37 PM DEBUG (7, 7) -> [(7, 7), ('A', 7)]
11/13/2024 01:47:37 PM DEBUG (0, 7) -> [('Base', 7), (0, 7)]
11/13/2024 01:47:37 PM DEBUG ('Base', 5) -> [('B', 8), (10, 5), ('Base', 5), ('C', 4), (11, 5)]
11/13/2024 01:47:37 PM DEBUG (12, 5) -> [(12, 5), ('A', 5)]
11/13/2024 01:47:37 PM DEBUG (20, 7) -> [('C', 7), (20, 7)]
11/13/2024 01:47:37 PM DEBUG ('A', 5) -> [(4, 5), (0, 5), (2, 5), ('A', 5), (1, 5)]
11/13/2024 01:47:37 PM DEBUG (14, 0) -> [('B', 0), (14, 0)]
11/13/2024 01:47:37 PM DEBUG ('B', 7) -> [('Base', 7), (6, 7), (8, 7), ('B', 7)]
11/13/2024 01:47:37 PM DEBUG (19, 0) -> [(19, 0), (20, 0)]
11/13/2024 01:47:37 PM DEBUG (3, 7) -> [(3, 7), ('B', 7)]
11/13/2024 01:47:37 PM DEBUG (2, 5) -> [(2, 5), (3, 5)]
11/13/2024 01:47:37 PM DEBUG (15, 5) -> [(15, 5), (16, 5)]
11/13/2024 01:47:37 PM DEBUG (8, 5) -> [(9, 5), (8, 5)]
11/13/2024 01:47:37 PM DEBUG ('A', 3) -> [(4, 5), (0, 5), (2, 5), ('A', 5), (1, 5)]
11/13/2024 01:47:37 PM DEBUG (16, 7) -> [('D', 9), (16, 7)]
11/13/2024 01:47:37 PM DEBUG (4, 0) -> [(5, 0), (4, 0)]
11/13/2024 01:47:37 PM DEBUG ('A', 1) -> [(2, 0), (1, 0), (0, 0), ('A', 2), (4, 0)]
11/13/2024 01:47:37 PM DEBUG (9, 0) -> [('C', 0), (9, 0)]
11/13/2024 01:47:37 PM DEBUG (19, 5) -> [(20, 5), (19, 5)]
11/13/2024 01:47:37 PM DEBUG (6, 7) -> [(6, 7), (7, 7)]
11/13/2024 01:47:37 PM DEBUG (5, 5) -> [('D', 5), (5, 5)]
11/13/2024 01:47:37 PM DEBUG (14, 5) -> [('B', 8), (14, 5)]
11/13/2024 01:47:37 PM DEBUG (1, 5) -> [(1, 5), ('C', 4)]
11/13/2024 01:47:37 PM DEBUG (10, 7) -> [(10, 7), ('A', 7)]
11/13/2024 01:47:37 PM DEBUG (19, 7) -> [(19, 7), (20, 7)]
11/13/2024 01:47:37 PM DEBUG (18, 5) -> [(18, 5), ('A', 5)]
11/13/2024 01:47:37 PM DEBUG (17, 7) -> [(18, 7), (17, 7)]
11/13/2024 01:47:37 PM DEBUG (15, 0) -> [(16, 0), (15, 0)]
11/13/2024 01:47:37 PM DEBUG (20, 0) -> [('C', 0), (20, 0)]
11/13/2024 01:47:37 PM DEBUG ('B', 8) -> [('B', 7), (8, 5), (6, 5), ('Base', 5)]
11/13/2024 01:47:37 PM DEBUG ('C', 0) -> [('Base', 0), ('C', 0), (15, 0), (13, 0), (12, 0)]
11/13/2024 01:47:37 PM DEBUG (13, 7) -> [(13, 7), (14, 7)]
11/13/2024 01:47:37 PM DEBUG (21, 5) -> [(21, 5), ('Base', 5)]
11/13/2024 01:47:37 PM DEBUG (5, 0) -> [(5, 0), ('D', 0)]
11/13/2024 01:47:37 PM DEBUG (4, 5) -> [(4, 5), (5, 5)]
11/13/2024 01:47:37 PM DEBUG ('Base', 0) -> [(11, 0), ('C', 0), ('Base', 0), ('B', 0), (10, 0)]
11/13/2024 01:47:37 PM DEBUG (10, 0) -> [('A', 1), (10, 0)]
11/13/2024 01:47:37 PM DEBUG ('A', 2) -> [(2, 0), ('A', 3), (0, 0), (1, 0), (4, 0)]
11/13/2024 01:47:37 PM DEBUG (9, 7) -> [('C', 7), (9, 7)]
11/13/2024 01:47:37 PM DEBUG ('C', 7) -> [('C', 7), ('Base', 7), (12, 7), (13, 7), (15, 7)]
11/13/2024 01:47:37 PM DEBUG (0, 0) -> [('Base', 0), (0, 0)]
11/13/2024 01:47:37 PM DEBUG (21, 0) -> [('Base', 0), (21, 0)]
11/13/2024 01:47:37 PM DEBUG ('D', 10) -> []
11/13/2024 01:47:37 PM DEBUG ('B', 0) -> [('Base', 0), ('B', 0), (8, 0), (6, 0)]
11/13/2024 01:47:37 PM DEBUG ('Base', 7) -> [('C', 7), (11, 7), ('Base', 7), ('B', 7), (10, 7)]
11/13/2024 01:47:37 PM DEBUG (12, 7) -> [(12, 7), ('A', 7)]
11/13/2024 01:47:37 PM DEBUG (6, 0) -> [(7, 0), (6, 0)]
11/13/2024 01:47:37 PM DEBUG ('A', 7) -> [(2, 7), (4, 7), (0, 7), ('A', 7), (1, 7)]
11/13/2024 01:47:37 PM DEBUG (11, 0) -> [(11, 0), ('D', 0)]
11/13/2024 01:47:37 PM DEBUG ('D', 9) -> [(19, 7), (21, 7), ('D', 10), (17, 7)]
11/13/2024 01:47:37 PM DEBUG (7, 5) -> [(7, 5), ('A', 5)]
11/13/2024 01:47:37 PM DEBUG (0, 5) -> [(0, 5), ('Base', 5)]
11/13/2024 01:47:37 PM DEBUG (15, 7) -> [(15, 7), (16, 7)]
11/13/2024 01:47:37 PM DEBUG (8, 7) -> [(8, 7), (9, 7)]
11/13/2024 01:47:37 PM DEBUG (20, 5) -> [(20, 5), ('C', 4)]
11/13/2024 01:47:37 PM DEBUG (16, 5) -> [(16, 5), ('D', 5)]
11/13/2024 01:47:37 PM DEBUG (1, 0) -> [('C', 0), (1, 0)]
11/13/2024 01:47:37 PM DEBUG (6, 5) -> [(7, 5), (6, 5)]
11/13/2024 01:47:37 PM DEBUG (3, 5) -> [('B', 8), (3, 5)]
11/13/2024 01:47:37 PM DEBUG (2, 7) -> [(2, 7), (3, 7)]
11/13/2024 01:47:37 PM DEBUG (11, 7) -> [(11, 7), ('D', 9)]
11/13/2024 01:47:37 PM DEBUG (10, 5) -> [(10, 5), ('A', 5)]
11/13/2024 01:47:37 PM DEBUG (7, 0) -> [('A', 1), (7, 0)]
11/13/2024 01:47:37 PM DEBUG ('D', 5) -> [(17, 5), (21, 5), ('D', 5), (19, 5)]
11/13/2024 01:47:37 PM DEBUG (12, 0) -> [('A', 1), (12, 0)]
11/13/2024 01:47:37 PM DEBUG (17, 0) -> [(18, 0), (17, 0)]
11/13/2024 01:47:37 PM DEBUG (5, 7) -> [('D', 9), (5, 7)]
11/13/2024 01:47:37 PM DEBUG (14, 7) -> [('B', 7), (14, 7)]
11/13/2024 01:47:37 PM DEBUG (13, 5) -> [(13, 5), (14, 5)]
11/13/2024 01:47:37 PM DEBUG ('C', 4) -> [('C', 7), (12, 5), (15, 5), (13, 5), ('Base', 5)]
11/13/2024 01:47:37 PM DEBUG (18, 7) -> [(18, 7), ('A', 7)]
11/13/2024 01:47:37 PM DEBUG (2, 0) -> [(3, 0), (2, 0)]
11/13/2024 01:47:37 PM DEBUG (16, 0) -> [(16, 0), ('D', 0)]
11/13/2024 01:47:37 PM DEBUG ('D', 0) -> [(19, 0), (17, 0), (21, 0), ('D', 0)]
11/13/2024 01:47:37 PM DEBUG (1, 7) -> [('C', 7), (1, 7)]
11/13/2024 01:47:37 PM DEBUG (9, 5) -> [(9, 5), ('C', 4)]
11/13/2024 01:47:37 PM DEBUG (11, 5) -> [('D', 5), (11, 5)]
11/13/2024 01:47:37 PM DEBUG (21, 7) -> [('Base', 7), (21, 7)]
11/13/2024 01:47:37 PM DEBUG (13, 0) -> [(14, 0), (13, 0)]
11/13/2024 01:47:40 PM DEBUG []
11/13/2024 01:47:40 PM DEBUG []
11/13/2024 01:47:40 PM INFO Max deadline: -2
11/13/2024 01:47:40 PM INFO Generated output word is: [('Base', 0), (10, 0), ('A', 1), ('A', 2), ('A', 3), (1, 5), ('C', 4), ('C', 7), ('Base', 7), (11, 7), ('D', 9), ('D', 10)]
11/13/2024 01:47:40 PM INFO Generated control policy is: Base -> 2 -> A -> 1 -> A -> 1 -> A -> 2 -> C -> 1 -> C -> 1 -> Base -> 2 -> D -> 1 -> D
11/13/2024 01:47:40 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:47:40 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:47:40 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:47:40 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:47:40 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:47:40 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:47:40 PM INFO No trap states were added.
11/13/2024 01:47:40 PM INFO No trap states were added.
11/13/2024 01:47:40 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:47:40 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:47:40 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
11/13/2024 01:47:40 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
11/13/2024 01:47:40 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
11/13/2024 01:47:40 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
11/13/2024 01:47:40 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:47:40 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:47:40 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
11/13/2024 01:47:40 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:47:40 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
11/13/2024 01:47:40 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3, 4, 5])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3, 4, 5])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([8, 5])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

11/13/2024 01:47:40 PM DEBUG [spec] No of nodes: 11
11/13/2024 01:47:40 PM DEBUG [spec] No of edges: 24
11/13/2024 01:48:32 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:48:32 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:48:32 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:48:32 PM DEBUG [within] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:48:32 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:48:32 PM DEBUG [within] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:48:32 PM INFO Trap states were added.
11/13/2024 01:48:32 PM INFO Trap states were added.
11/13/2024 01:48:32 PM DEBUG [union] DFA1: (Repeat (Hold 1 B ) 0 3 ) DFA2: (Repeat (Hold 1 C ) 1 4 )
11/13/2024 01:48:32 PM DEBUG [concatenation] DFA1: (Repeat (Hold 2 A ) 0 6 ) DFA2: (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) )
11/13/2024 01:48:32 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:48:32 PM DEBUG [within] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:48:32 PM DEBUG [concatenation] DFA1: (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) DFA2: (Repeat (Hold 1 D ) 0 6 )
11/13/2024 01:48:32 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:48:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:48:32 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:48:32 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:48:32 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:48:32 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:48:32 PM INFO No trap states were added.
11/13/2024 01:48:32 PM INFO No trap states were added.
11/13/2024 01:48:32 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:48:32 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:48:32 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
11/13/2024 01:48:32 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
11/13/2024 01:48:32 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
11/13/2024 01:48:32 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
11/13/2024 01:48:32 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:48:32 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:48:32 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
11/13/2024 01:48:32 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:48:32 PM DEBUG [spec] mode: Normal DFA: 
Name: (Concat (Concat (Repeat (Hold 2 A ) 0 6 ) (Union (Repeat (Hold 1 B ) 0 3 ) (Repeat (Hold 1 C ) 1 4 ) ) ) (Repeat (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([39])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {}), (16, {}), (17, {}), (18, {}), (19, {}), (20, {}), (21, {}), (22, {}), (23, {}), (24, {}), (25, {}), (26, {}), (27, {}), (28, {}), (29, {}), (30, {}), (31, {}), (32, {}), (33, {}), (34, {}), (35, {}), (36, {}), (37, {}), (38, {}), (39, {})]
Edges: [(0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (0, 3, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 4, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 6, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (6, 9, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 8, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (7, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 10, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (9, 12, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (11, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (12, 13, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (13, 14, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (14, 15, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (15, 24, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (15, 27, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (16, 28, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (16, 29, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (17, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & (trap_guard))', 'weight': 0, 'label': '((B) & (C)) | ((B) & (trap_guard))'}), (17, 18, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (18, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (19, 18, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (20, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((trap_guard) & (C)) | ((B) & (C))', 'weight': 0, 'label': '((trap_guard) & (C)) | ((B) & (C))'}), (20, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (20, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (21, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (21, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (22, 16, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((1)) & (C)', 'weight': 0, 'label': '((1)) & (C)'}), (23, 17, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (23, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (23, 22, {'input': set([11, 2, 3, 10]), 'guard': '(trap_guard) & (C)', 'weight': 0, 'label': '(trap_guard) & (C)'}), (23, 25, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (24, 16, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & ((else))) | ((B) & (C))', 'weight': 0, 'label': '((B) & ((else))) | ((B) & (C))'}), (24, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (24, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (25, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & (trap_guard)) | ((B) & (C)))'}), (26, 16, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '((trap_guard) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (26, 19, {'input': set([0, 1, 8, 9]), 'guard': '(trap_guard) & ((else))', 'weight': 0, 'label': '(trap_guard) & ((else))'}), (27, 26, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (27, 20, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (27, 21, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (27, 23, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (28, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (28, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (29, 30, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (29, 31, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (30, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 32, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (31, 33, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (32, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 34, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (33, 35, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (34, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 36, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (35, 37, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (36, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (37, 38, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (38, 39, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
11/13/2024 01:48:32 PM DEBUG [spec] No of nodes: 40
11/13/2024 01:48:32 PM DEBUG [spec] No of edges: 72
11/13/2024 01:48:32 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:48:32 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
11/13/2024 01:48:32 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

11/13/2024 01:48:32 PM DEBUG [spec] No of nodes: 11
11/13/2024 01:48:32 PM DEBUG [spec] No of edges: 24
11/13/2024 01:48:32 PM DEBUG alphabet: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
11/13/2024 01:48:32 PM DEBUG (0, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:48:32 PM DEBUG (0, 1): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:48:32 PM DEBUG (1, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:48:32 PM DEBUG (1, 2): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:48:32 PM DEBUG (2, 0): {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:48:32 PM DEBUG (2, 3): {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}
11/13/2024 01:48:32 PM DEBUG (3, 8): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}
11/13/2024 01:48:32 PM DEBUG (3, 5): {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}
11/13/2024 01:48:32 PM DEBUG (4, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
11/13/2024 01:48:32 PM DEBUG (4, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:48:32 PM DEBUG (4, 7): {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}
11/13/2024 01:48:32 PM DEBUG (5, 8): {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}
11/13/2024 01:48:32 PM DEBUG (5, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
11/13/2024 01:48:32 PM DEBUG (5, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:48:32 PM DEBUG (5, 6): {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}
11/13/2024 01:48:32 PM DEBUG (6, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:48:32 PM DEBUG (6, 7): {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}
11/13/2024 01:48:32 PM DEBUG (7, 9): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
11/13/2024 01:48:32 PM DEBUG (7, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:48:32 PM DEBUG (8, 4): {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}
11/13/2024 01:48:32 PM DEBUG (8, 5): {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}
11/13/2024 01:48:32 PM DEBUG (8, 7): {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}
11/13/2024 01:48:32 PM DEBUG (9, 10): {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}
11/13/2024 01:48:32 PM DEBUG (9, 7): {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
11/13/2024 01:48:33 PM DEBUG findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans (u'/home/zachary/anaconda3/envs/2024fs-cs8001-2.7/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000
11/13/2024 01:48:34 PM DEBUG 
End of translate


11/13/2024 01:48:34 PM INFO The bound of formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" is (6, 18)!
11/13/2024 01:48:34 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to normal DFA of size (40, 72)!
11/13/2024 01:48:34 PM INFO Translated formula "[H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]" to infinity DFA of size (11, 24)!
11/13/2024 01:48:34 PM DEBUG 

Start policy computation

11/13/2024 01:48:34 PM DEBUG [extend_ts] TS: (5, 23) ETS:(27, 67)
11/13/2024 01:48:34 PM INFO Constructing product automaton with normal DFA!
11/13/2024 01:48:34 PM INFO Product automaton size is: (204, 378)
11/13/2024 01:48:34 PM INFO Max deadline: None
11/13/2024 01:48:34 PM INFO No control policy found!
11/13/2024 01:48:34 PM INFO Constructing product automaton with infinity DFA!
11/13/2024 01:48:34 PM INFO Product automaton size is: (84, 211)
11/13/2024 01:48:34 PM DEBUG (18, 0) -> [('A', 1), (18, 0)]
11/13/2024 01:48:34 PM DEBUG (4, 7) -> [(4, 7), (5, 7)]
11/13/2024 01:48:34 PM DEBUG (17, 5) -> [(17, 5), (18, 5)]
11/13/2024 01:48:34 PM DEBUG (3, 0) -> [(3, 0), ('B', 0)]
11/13/2024 01:48:34 PM DEBUG (8, 0) -> [(9, 0), (8, 0)]
11/13/2024 01:48:34 PM DEBUG (7, 7) -> [(7, 7), ('A', 7)]
11/13/2024 01:48:34 PM DEBUG (0, 7) -> [('Base', 7), (0, 7)]
11/13/2024 01:48:34 PM DEBUG ('Base', 5) -> [('B', 8), (10, 5), ('Base', 5), ('C', 4), (11, 5)]
11/13/2024 01:48:34 PM DEBUG (12, 5) -> [(12, 5), ('A', 5)]
11/13/2024 01:48:34 PM DEBUG (20, 7) -> [('C', 7), (20, 7)]
11/13/2024 01:48:34 PM DEBUG ('A', 5) -> [(4, 5), (0, 5), (2, 5), ('A', 5), (1, 5)]
11/13/2024 01:48:34 PM DEBUG (14, 0) -> [('B', 0), (14, 0)]
11/13/2024 01:48:34 PM DEBUG ('B', 7) -> [('Base', 7), (6, 7), (8, 7), ('B', 7)]
11/13/2024 01:48:34 PM DEBUG (19, 0) -> [(19, 0), (20, 0)]
11/13/2024 01:48:34 PM DEBUG (3, 7) -> [(3, 7), ('B', 7)]
11/13/2024 01:48:34 PM DEBUG (2, 5) -> [(2, 5), (3, 5)]
11/13/2024 01:48:34 PM DEBUG (15, 5) -> [(15, 5), (16, 5)]
11/13/2024 01:48:34 PM DEBUG (8, 5) -> [(9, 5), (8, 5)]
11/13/2024 01:48:34 PM DEBUG ('A', 3) -> [(4, 5), (0, 5), (2, 5), ('A', 5), (1, 5)]
11/13/2024 01:48:34 PM DEBUG (16, 7) -> [('D', 9), (16, 7)]
11/13/2024 01:48:34 PM DEBUG (4, 0) -> [(5, 0), (4, 0)]
11/13/2024 01:48:34 PM DEBUG ('A', 1) -> [(2, 0), (1, 0), (0, 0), ('A', 2), (4, 0)]
11/13/2024 01:48:34 PM DEBUG (9, 0) -> [('C', 0), (9, 0)]
11/13/2024 01:48:34 PM DEBUG (19, 5) -> [(20, 5), (19, 5)]
11/13/2024 01:48:34 PM DEBUG (6, 7) -> [(6, 7), (7, 7)]
11/13/2024 01:48:34 PM DEBUG (5, 5) -> [('D', 5), (5, 5)]
11/13/2024 01:48:34 PM DEBUG (14, 5) -> [('B', 8), (14, 5)]
11/13/2024 01:48:34 PM DEBUG (1, 5) -> [(1, 5), ('C', 4)]
11/13/2024 01:48:34 PM DEBUG (10, 7) -> [(10, 7), ('A', 7)]
11/13/2024 01:48:34 PM DEBUG (19, 7) -> [(19, 7), (20, 7)]
11/13/2024 01:48:34 PM DEBUG (18, 5) -> [(18, 5), ('A', 5)]
11/13/2024 01:48:34 PM DEBUG (17, 7) -> [(18, 7), (17, 7)]
11/13/2024 01:48:34 PM DEBUG (15, 0) -> [(16, 0), (15, 0)]
11/13/2024 01:48:34 PM DEBUG (20, 0) -> [('C', 0), (20, 0)]
11/13/2024 01:48:34 PM DEBUG ('B', 8) -> [('B', 7), (8, 5), (6, 5), ('Base', 5)]
11/13/2024 01:48:34 PM DEBUG ('C', 0) -> [('Base', 0), ('C', 0), (15, 0), (13, 0), (12, 0)]
11/13/2024 01:48:34 PM DEBUG (13, 7) -> [(13, 7), (14, 7)]
11/13/2024 01:48:34 PM DEBUG (21, 5) -> [(21, 5), ('Base', 5)]
11/13/2024 01:48:34 PM DEBUG (5, 0) -> [(5, 0), ('D', 0)]
11/13/2024 01:48:34 PM DEBUG (4, 5) -> [(4, 5), (5, 5)]
11/13/2024 01:48:34 PM DEBUG ('Base', 0) -> [(11, 0), ('C', 0), ('Base', 0), ('B', 0), (10, 0)]
11/13/2024 01:48:34 PM DEBUG (10, 0) -> [('A', 1), (10, 0)]
11/13/2024 01:48:34 PM DEBUG ('A', 2) -> [(2, 0), ('A', 3), (0, 0), (1, 0), (4, 0)]
11/13/2024 01:48:34 PM DEBUG (9, 7) -> [('C', 7), (9, 7)]
11/13/2024 01:48:34 PM DEBUG ('C', 7) -> [('C', 7), ('Base', 7), (12, 7), (13, 7), (15, 7)]
11/13/2024 01:48:34 PM DEBUG (0, 0) -> [('Base', 0), (0, 0)]
11/13/2024 01:48:34 PM DEBUG (21, 0) -> [('Base', 0), (21, 0)]
11/13/2024 01:48:34 PM DEBUG ('D', 10) -> []
11/13/2024 01:48:34 PM DEBUG ('B', 0) -> [('Base', 0), ('B', 0), (8, 0), (6, 0)]
11/13/2024 01:48:34 PM DEBUG ('Base', 7) -> [('C', 7), (11, 7), ('Base', 7), ('B', 7), (10, 7)]
11/13/2024 01:48:34 PM DEBUG (12, 7) -> [(12, 7), ('A', 7)]
11/13/2024 01:48:34 PM DEBUG (6, 0) -> [(7, 0), (6, 0)]
11/13/2024 01:48:34 PM DEBUG ('A', 7) -> [(2, 7), (4, 7), (0, 7), ('A', 7), (1, 7)]
11/13/2024 01:48:34 PM DEBUG (11, 0) -> [(11, 0), ('D', 0)]
11/13/2024 01:48:34 PM DEBUG ('D', 9) -> [(19, 7), (21, 7), ('D', 10), (17, 7)]
11/13/2024 01:48:34 PM DEBUG (7, 5) -> [(7, 5), ('A', 5)]
11/13/2024 01:48:34 PM DEBUG (0, 5) -> [(0, 5), ('Base', 5)]
11/13/2024 01:48:34 PM DEBUG (15, 7) -> [(15, 7), (16, 7)]
11/13/2024 01:48:34 PM DEBUG (8, 7) -> [(8, 7), (9, 7)]
11/13/2024 01:48:34 PM DEBUG (20, 5) -> [(20, 5), ('C', 4)]
11/13/2024 01:48:34 PM DEBUG (16, 5) -> [(16, 5), ('D', 5)]
11/13/2024 01:48:34 PM DEBUG (1, 0) -> [('C', 0), (1, 0)]
11/13/2024 01:48:34 PM DEBUG (6, 5) -> [(7, 5), (6, 5)]
11/13/2024 01:48:34 PM DEBUG (3, 5) -> [('B', 8), (3, 5)]
11/13/2024 01:48:34 PM DEBUG (2, 7) -> [(2, 7), (3, 7)]
11/13/2024 01:48:34 PM DEBUG (11, 7) -> [(11, 7), ('D', 9)]
11/13/2024 01:48:34 PM DEBUG (10, 5) -> [(10, 5), ('A', 5)]
11/13/2024 01:48:34 PM DEBUG (7, 0) -> [('A', 1), (7, 0)]
11/13/2024 01:48:34 PM DEBUG ('D', 5) -> [(17, 5), (21, 5), ('D', 5), (19, 5)]
11/13/2024 01:48:34 PM DEBUG (12, 0) -> [('A', 1), (12, 0)]
11/13/2024 01:48:34 PM DEBUG (17, 0) -> [(18, 0), (17, 0)]
11/13/2024 01:48:34 PM DEBUG (5, 7) -> [('D', 9), (5, 7)]
11/13/2024 01:48:34 PM DEBUG (14, 7) -> [('B', 7), (14, 7)]
11/13/2024 01:48:34 PM DEBUG (13, 5) -> [(13, 5), (14, 5)]
11/13/2024 01:48:34 PM DEBUG ('C', 4) -> [('C', 7), (12, 5), (15, 5), (13, 5), ('Base', 5)]
11/13/2024 01:48:34 PM DEBUG (18, 7) -> [(18, 7), ('A', 7)]
11/13/2024 01:48:34 PM DEBUG (2, 0) -> [(3, 0), (2, 0)]
11/13/2024 01:48:34 PM DEBUG (16, 0) -> [(16, 0), ('D', 0)]
11/13/2024 01:48:34 PM DEBUG ('D', 0) -> [(19, 0), (17, 0), (21, 0), ('D', 0)]
11/13/2024 01:48:34 PM DEBUG (1, 7) -> [('C', 7), (1, 7)]
11/13/2024 01:48:34 PM DEBUG (9, 5) -> [(9, 5), ('C', 4)]
11/13/2024 01:48:34 PM DEBUG (11, 5) -> [('D', 5), (11, 5)]
11/13/2024 01:48:34 PM DEBUG (21, 7) -> [('Base', 7), (21, 7)]
11/13/2024 01:48:34 PM DEBUG (13, 0) -> [(14, 0), (13, 0)]
11/13/2024 01:48:36 PM DEBUG []
11/13/2024 01:48:36 PM DEBUG []
11/13/2024 01:48:36 PM INFO Max deadline: -2
11/13/2024 01:48:36 PM INFO Generated output word is: [('Base', 0), (10, 0), ('A', 1), ('A', 2), ('A', 3), (1, 5), ('C', 4), ('C', 7), ('Base', 7), (11, 7), ('D', 9), ('D', 10)]
11/13/2024 01:48:36 PM INFO Generated control policy is: Base -> 2 -> A -> 1 -> A -> 1 -> A -> 2 -> C -> 1 -> C -> 1 -> Base -> 2 -> D -> 1 -> D
11/13/2024 01:48:36 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:48:36 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 A )
11/13/2024 01:48:36 PM DEBUG [hold] Prop: B Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:48:36 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 B )
11/13/2024 01:48:36 PM DEBUG [hold] Prop: C Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:48:36 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 1 C )
11/13/2024 01:48:36 PM INFO No trap states were added.
11/13/2024 01:48:36 PM INFO No trap states were added.
11/13/2024 01:48:36 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:48:36 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3)]
 final: [(2, 2)]
11/13/2024 01:48:36 PM DEBUG state: Eventually 
 init: [(0, 3)]
 final: [(2, 2)]
11/13/2024 01:48:36 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
11/13/2024 01:48:36 PM DEBUG [union] DFA1: (Eventually (Hold 1 B ) 0 3 ) DFA2: (Eventually (Hold 1 C ) 1 4 )
11/13/2024 01:48:36 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 6 ) DFA2: (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) )
11/13/2024 01:48:36 PM DEBUG [hold] Prop: D Duration: 1 Negation: False Props: set(['A', 'C', 'B', 'D'])
11/13/2024 01:48:36 PM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 D )
11/13/2024 01:48:36 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) DFA2: (Eventually (Hold 1 D ) 0 6 )
11/13/2024 01:48:36 PM DEBUG [spec] spec: [H^2 A]^[0, 6] * ([H^1 B]^[0, 3] | [H^1 C]^[1, 4]) * [H^1 D]^[0, 6]
11/13/2024 01:48:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 6 ) (Union (Eventually (Hold 1 B ) 0 3 ) (Eventually (Hold 1 C ) 1 4 ) ) ) (Eventually (Hold 1 D ) 0 6 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4, 'D': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([10])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6, 8, 10, 12, 14]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 8, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '(B) & ((1))', 'weight': 0, 'label': '(B) & ((1))'}), (3, 5, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '((else)) & ((1))', 'weight': 0, 'label': '((else)) & ((1))'}), (4, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (4, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (4, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '(((else)) & (C)) | ((B) & (C))', 'weight': 0, 'label': '(((else)) & (C)) | ((B) & (C))'}), (5, 8, {'input': set([12, 4, 5, 13]), 'guard': '(B) & ((else))', 'weight': 0, 'label': '(B) & ((else))'}), (5, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (5, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (5, 6, {'input': set([15, 14, 6, 7]), 'guard': '(B) & (C)', 'weight': 0, 'label': '(B) & (C)'}), (6, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (6, 7, {'input': set([2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15]), 'guard': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))', 'weight': 0, 'label': '(((else)) & (C)) | (((B) & ((else))) | ((B) & (C)))'}), (7, 9, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (7, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 4, {'input': set([11, 2, 3, 10]), 'guard': '((else)) & (C)', 'weight': 0, 'label': '((else)) & (C)'}), (8, 5, {'input': set([0, 1, 8, 9]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((B) & (C)) | ((B) & ((else)))', 'weight': 0, 'label': '((B) & (C)) | ((B) & ((else)))'}), (9, 10, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (9, 7, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'})]
		
11/13/2024 01:48:36 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([10])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([7])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([7])
     Choices:
       8 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       4 -> both=set([]) left=set([]) right=set([2, 3, 6, 7, 10, 11, 14, 15])
       6 -> both=set([7, 6, 14, 15]) left=set([4, 12, 5, 13]) right=set([3, 2, 11, 10])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3, 4, 5])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([3, 4, 5])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([3])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([8, 5])
         Final: set([7])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([7])
   Final: set([10])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([7])
     Final: set([10])

11/13/2024 01:48:36 PM DEBUG [spec] No of nodes: 11
11/13/2024 01:48:36 PM DEBUG [spec] No of edges: 24
11/13/2024 01:48:36 PM INFO Relaxation is: (-2, [(-2, (0, 6)), (-inf, (0, 3)), (-2, (1, 4)), (-3, (0, 6))])
11/13/2024 01:48:36 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A'])
11/13/2024 01:48:36 PM DEBUG [eventually] Low: 1 High: 2 DFA: (Hold 1 A )
11/13/2024 01:48:36 PM DEBUG [spec] spec: [H^1 A]^[1, 2]
11/13/2024 01:48:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 1 A ) 1 2 )
Directed: True
Multi: False
Props: {'A': 1}
Alphabet: set([0, 1]) 
Initial: [3]
Final: set([2])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {})]
Edges: [(0, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
11/13/2024 01:48:36 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([2])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([2])

11/13/2024 01:48:36 PM DEBUG [spec] No of nodes: 4
11/13/2024 01:48:36 PM DEBUG [spec] No of edges: 5
11/13/2024 01:48:36 PM INFO The bound of formula "[H^1 A]^[1, 2]" is (2, 2)!
11/13/2024 01:48:36 PM INFO Translated formula "[H^1 A]^[1, 2]" to infinity DFA of size (4, 5)!
11/13/2024 01:48:36 PM INFO Trap states were added.
11/13/2024 01:48:36 PM INFO Constructing product automaton with infinity DFA!
11/13/2024 01:48:36 PM INFO Product automaton size is: (8, 10)
11/13/2024 01:48:36 PM INFO The result of the verification procedure is True!
11/13/2024 01:48:36 PM DEBUG [hold] Prop: B Duration: 3 Negation: True Props: set(['B'])
11/13/2024 01:48:36 PM DEBUG [eventually] Low: 1 High: 4 DFA: (Hold 3 not B )
11/13/2024 01:48:36 PM DEBUG [spec] spec: [H^3 !B]^[1, 4]
11/13/2024 01:48:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Eventually (Hold 3 not B ) 1 4 )
Directed: True
Multi: False
Props: {'B': 1}
Alphabet: set([0, 1]) 
Initial: [5]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (1, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (2, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (3, 0, {'input': set([1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([0]), 'guard': u'!B', 'weight': 0, 'label': u'!B'}), (5, 0, {'input': set([0, 1]), 'guard': '(1)', 'weight': 0, 'label': '(1)'})]
		
11/13/2024 01:48:36 PM DEBUG [spec] tree:
 Op: Eventually Flags[WDF, WWF, UNR]: True True False
 Init: set([5])
 Final: set([4])
 Left:
   Op: Hold Flags[WDF, WWF, UNR]: True True True
   Init: set([0])
   Final: set([4])

11/13/2024 01:48:36 PM DEBUG [spec] No of nodes: 6
11/13/2024 01:48:36 PM DEBUG [spec] No of edges: 9
11/13/2024 01:48:36 PM INFO The bound of formula "[H^3 !B]^[1, 4]" is (4, 4)!
11/13/2024 01:48:36 PM INFO Translated formula "[H^3 !B]^[1, 4]" to infinity DFA of size (6, 9)!
11/13/2024 01:48:36 PM INFO Trap states were added.
11/13/2024 01:48:36 PM INFO Constructing product automaton with infinity DFA!
11/13/2024 01:48:36 PM INFO Product automaton size is: (10, 14)
11/13/2024 01:48:36 PM INFO The result of the verification procedure is False!
11/13/2024 01:48:36 PM DEBUG [hold] Prop: A Duration: 1 Negation: False Props: set(['A', 'B'])
11/13/2024 01:48:36 PM DEBUG [eventually] Low: 0 High: 2 DFA: (Hold 1 A )
11/13/2024 01:48:36 PM DEBUG [hold] Prop: B Duration: 2 Negation: False Props: set(['A', 'B'])
11/13/2024 01:48:36 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 B )
11/13/2024 01:48:36 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 A ) 0 2 ) DFA2: (Eventually (Hold 2 B ) 0 3 )
11/13/2024 01:48:36 PM DEBUG [spec] spec: [H^1 A]^[0, 2] * [H^2 B]^[0, 3]
11/13/2024 01:48:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 A ) 0 2 ) (Eventually (Hold 2 B ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'B': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 2, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (3, 2, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (4, 2, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'B', 'weight': 0, 'label': u'B'})]
		
11/13/2024 01:48:36 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([5])

11/13/2024 01:48:36 PM DEBUG [spec] No of nodes: 6
11/13/2024 01:48:36 PM DEBUG [spec] No of edges: 10
11/13/2024 01:48:36 PM DEBUG Tight deadlines for positive traces: [[1, 3], [2, 3]]
11/13/2024 01:48:36 PM DEBUG Tight deadlines for negative traces: [[3, 2], [2, 4]]
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 1, MCR: 1, FP: [], FN: [2]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 1, MCR: 1
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 2, MCR: 1, FP: [2], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 1, MCR: 1
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 3, MCR: 2, FP: [3, 2], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 1, MCR: 1
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 2, MCR: 3, FP: [2], FN: [3, 3]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 3, MCR: 2
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 3, MCR: 1, FP: [2], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 1, MCR: 3
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 4, MCR: 2, FP: [2, 4], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 1, MCR: 3
11/13/2024 01:48:36 PM INFO The inferred deadlines are: [1, 3] with misclassification rate: 1
11/13/2024 01:48:36 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'C', 'B'])
11/13/2024 01:48:36 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 2 A )
11/13/2024 01:48:36 PM DEBUG [hold] Prop: B Duration: 3 Negation: False Props: set(['A', 'C', 'B'])
11/13/2024 01:48:36 PM DEBUG [eventually] Low: 2 High: 6 DFA: (Hold 3 B )
11/13/2024 01:48:36 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 4 ) DFA2: (Eventually (Hold 3 B ) 2 6 )
11/13/2024 01:48:36 PM DEBUG [hold] Prop: C Duration: 2 Negation: False Props: set(['A', 'C', 'B'])
11/13/2024 01:48:36 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 C )
11/13/2024 01:48:36 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 A ) 0 4 ) (Eventually (Hold 3 B ) 2 6 ) ) DFA2: (Eventually (Hold 2 C ) 0 3 )
11/13/2024 01:48:36 PM DEBUG [spec] spec: [H^2 A]^[0, 4] * [H^3 B]^[2, 6] * [H^2 C]^[0, 3]
11/13/2024 01:48:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 A ) 0 4 ) (Eventually (Hold 3 B ) 2 6 ) ) (Eventually (Hold 2 C ) 0 3 ) )
Directed: True
Multi: False
Props: {'A': 1, 'C': 2, 'B': 4}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7]) 
Initial: [0]
Final: set([12])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {})]
Edges: [(0, 0, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3, 5, 7]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3, 5, 7]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 9, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (4, 4, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([4, 5, 6, 7]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (5, 4, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([4, 5, 6, 7]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (6, 4, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (6, 7, {'input': set([4, 5, 6, 7]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (7, 8, {'input': set([4, 5, 6, 7]), 'guard': u'B', 'weight': 0, 'label': u'B'}), (7, 4, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 8, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 10, {'input': set([2, 3, 6, 7]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (9, 4, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(1)', 'weight': 0, 'label': '(1)'}), (10, 8, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (10, 11, {'input': set([2, 3, 6, 7]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (11, 8, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (11, 12, {'input': set([2, 3, 6, 7]), 'guard': u'C', 'weight': 0, 'label': u'C'})]
		
11/13/2024 01:48:36 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([12])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([8])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([8])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([4])
       Final: set([8])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([8])
   Final: set([12])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([8])
     Final: set([12])

11/13/2024 01:48:36 PM DEBUG [spec] No of nodes: 13
11/13/2024 01:48:36 PM DEBUG [spec] No of edges: 22
11/13/2024 01:48:36 PM DEBUG Tight deadlines for positive traces: [[16, 23, 16], [5, 22, 50], [15, 14, 10], [15, 17, 2], [7, 24, 9], [2, 22, 28], [49, 5, 9], [19, 42, 12], [6, 12, 16], [13, 11, 12], [30, 12, 4], [21, 10, 2], [11, 17, 6], [24, 14, 24], [2, 9, 6], [10, 16, 2], [2, 32, 11], [2, 21, 16], [9, 34, 9], [8, 15, 13], [34, 20, 2], [21, 18, 9], [2, 14, 18], [26, 13, 2], [2, 36, 16], [2, 9, 51], [35, 11, 10], [2, 21, 31], [2, 30, 25], [8, 5, 19], [3, 22, 33], [29, 6, 15], [9, 40, 14], [2, 20, 7], [5, 15, 13], [7, 26, 7], [6, 7, 14], [9, 7, 25], [9, 45, 3], [4, 7, 31], [10, 5, 12], [3, 8, 4], [25, 17, 12], [7, 43, 5], [3, 17, 15], [6, 18, 19], [8, 41, 7], [47, 6, 17], [16, 14, 26], [2, 15, 30]]
11/13/2024 01:48:36 PM DEBUG Tight deadlines for negative traces: [[36, 19, 4], [31, 18, 19], [49, 41, 25], [56, 8, 21], [89, 127, 12], [30, 21, 95], [35, 110, 12], [41, 108, 6], [68, 6, 91], [2, 106, 9], [73, 5, 9], [14, 25, 37], [10, 156, 7], [34, 10, 67], [7, 184, 37], [56, 41, 21], [10, 47, 37], [21, 22, 24], [35, 48, 6], [12, 101, 33], [14, 15, 36], [114, 16, 5], [5, 140, 17], [22, 20, 39], [2, 55, 8], [41, 51, 18], [12, 61, 9], [6, 41, 35], [49, 5, 43], [102, 5, 5], [71, 26, 46], [33, 28, 19], [61, 5, 11], [91, 5, 45], [63, 18, 3], [43, 44, 14], [116, 5, 11], [2, 117, 6], [87, 10, 39], [30, 8, 87], [20, 12, 78], [13, 23, 25], [2, 33, 106], [12, 7, 117], [3, 57, 46], [31, 45, 25], [21, 5, 56], [4, 92, 25], [5, 27, 48], [12, 6, 93]]
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 2, MCR: 43, FP: [2, 2, 2, 2], FN: [16, 5, 15, 15, 7, 49, 19, 6, 13, 30, 21, 11, 24, 10, 9, 8, 34, 21, 26, 35, 8, 3, 29, 9, 5, 7, 6, 9, 9, 4, 10, 3, 25, 7, 3, 6, 8, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 43, MCR: 2
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 3, MCR: 41, FP: [2, 2, 2, 2, 3], FN: [16, 5, 15, 15, 7, 49, 19, 6, 13, 30, 21, 11, 24, 10, 9, 8, 34, 21, 26, 35, 8, 29, 9, 5, 7, 6, 9, 9, 4, 10, 25, 7, 6, 8, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 41, MCR: 3
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 4, MCR: 41, FP: [2, 2, 2, 2, 3, 4], FN: [16, 5, 15, 15, 7, 49, 19, 6, 13, 30, 21, 11, 24, 10, 9, 8, 34, 21, 26, 35, 8, 29, 9, 5, 7, 6, 9, 9, 10, 25, 7, 6, 8, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 41, MCR: 3
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 5, MCR: 41, FP: [2, 5, 2, 2, 2, 3, 4, 5], FN: [16, 15, 15, 7, 49, 19, 6, 13, 30, 21, 11, 24, 10, 9, 8, 34, 21, 26, 35, 8, 29, 9, 7, 6, 9, 9, 10, 25, 7, 6, 8, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 41, MCR: 3
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 6, MCR: 39, FP: [2, 5, 2, 6, 2, 2, 3, 4, 5], FN: [16, 15, 15, 7, 49, 19, 13, 30, 21, 11, 24, 10, 9, 8, 34, 21, 26, 35, 8, 29, 9, 7, 9, 9, 10, 25, 7, 8, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 39, MCR: 6
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 7, MCR: 37, FP: [2, 7, 5, 2, 6, 2, 2, 3, 4, 5], FN: [16, 15, 15, 49, 19, 13, 30, 21, 11, 24, 10, 9, 8, 34, 21, 26, 35, 8, 29, 9, 9, 9, 10, 25, 8, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 37, MCR: 7
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 8, MCR: 34, FP: [2, 7, 5, 2, 6, 2, 2, 3, 4, 5], FN: [16, 15, 15, 49, 19, 13, 30, 21, 11, 24, 10, 9, 34, 21, 26, 35, 29, 9, 9, 9, 10, 25, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 34, MCR: 8
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 9, MCR: 30, FP: [2, 7, 5, 2, 6, 2, 2, 3, 4, 5], FN: [16, 15, 15, 49, 19, 13, 30, 21, 11, 24, 10, 34, 21, 26, 35, 29, 10, 25, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 30, MCR: 9
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 10, MCR: 30, FP: [2, 10, 7, 10, 5, 2, 6, 2, 2, 3, 4, 5], FN: [16, 15, 15, 49, 19, 13, 30, 21, 11, 24, 34, 21, 26, 35, 29, 25, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 30, MCR: 9
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 11, MCR: 29, FP: [2, 10, 7, 10, 5, 2, 6, 2, 2, 3, 4, 5], FN: [16, 15, 15, 49, 19, 13, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 12, MCR: 33, FP: [2, 10, 7, 10, 12, 5, 2, 12, 6, 2, 2, 12, 3, 4, 5, 12], FN: [16, 15, 15, 49, 19, 13, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 13, MCR: 33, FP: [2, 10, 7, 10, 12, 5, 2, 12, 6, 2, 13, 2, 12, 3, 4, 5, 12], FN: [16, 15, 15, 49, 19, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 14, MCR: 35, FP: [2, 14, 10, 7, 10, 12, 14, 5, 2, 12, 6, 2, 13, 2, 12, 3, 4, 5, 12], FN: [16, 15, 15, 49, 19, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 15, MCR: 33, FP: [2, 14, 10, 7, 10, 12, 14, 5, 2, 12, 6, 2, 13, 2, 12, 3, 4, 5, 12], FN: [16, 49, 19, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47, 16]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 16, MCR: 31, FP: [2, 14, 10, 7, 10, 12, 14, 5, 2, 12, 6, 2, 13, 2, 12, 3, 4, 5, 12], FN: [49, 19, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 19, MCR: 30, FP: [2, 14, 10, 7, 10, 12, 14, 5, 2, 12, 6, 2, 13, 2, 12, 3, 4, 5, 12], FN: [49, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 20, MCR: 31, FP: [2, 14, 10, 7, 10, 12, 14, 5, 2, 12, 6, 2, 20, 13, 2, 12, 3, 4, 5, 12], FN: [49, 30, 21, 24, 34, 21, 26, 35, 29, 25, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 21, MCR: 31, FP: [2, 14, 10, 7, 10, 21, 12, 14, 5, 2, 12, 6, 2, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 30, 24, 34, 26, 35, 29, 25, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 22, MCR: 32, FP: [2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 30, 24, 34, 26, 35, 29, 25, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 24, MCR: 31, FP: [2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 30, 34, 26, 35, 29, 25, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 25, MCR: 30, FP: [2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 30, 34, 26, 35, 29, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 26, MCR: 29, FP: [2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 30, 34, 35, 29, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 29, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 29, MCR: 28, FP: [2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 30, 34, 35, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 30, MCR: 29, FP: [30, 2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 30, 20, 13, 2, 12, 3, 21, 4, 5, 12], FN: [49, 34, 35, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 31, MCR: 31, FP: [31, 30, 2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 34, 35, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 33, MCR: 32, FP: [31, 30, 2, 14, 10, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 33, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 34, 35, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 34, MCR: 32, FP: [31, 30, 2, 14, 10, 34, 7, 10, 21, 12, 14, 5, 22, 2, 12, 6, 33, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 35, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 35, MCR: 33, FP: [31, 30, 35, 2, 14, 10, 34, 7, 10, 21, 35, 12, 14, 5, 22, 2, 12, 6, 33, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 36, MCR: 34, FP: [36, 31, 30, 35, 2, 14, 10, 34, 7, 10, 21, 35, 12, 14, 5, 22, 2, 12, 6, 33, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 41, MCR: 36, FP: [36, 31, 30, 35, 41, 2, 14, 10, 34, 7, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 33, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 43, MCR: 37, FP: [36, 31, 30, 35, 41, 2, 14, 10, 34, 7, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 33, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49, 47]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 47, MCR: 36, FP: [36, 31, 30, 35, 41, 2, 14, 10, 34, 7, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 33, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: [49]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 49, MCR: 37, FP: [36, 31, 49, 30, 35, 41, 2, 14, 10, 34, 7, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 33, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 56, MCR: 39, FP: [36, 31, 49, 56, 30, 35, 41, 2, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 33, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 61, MCR: 40, FP: [36, 31, 49, 56, 30, 35, 41, 2, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 33, 61, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 63, MCR: 41, FP: [36, 31, 49, 56, 30, 35, 41, 2, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 33, 61, 63, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 68, MCR: 42, FP: [36, 31, 49, 56, 30, 35, 41, 68, 2, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 33, 61, 63, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 71, MCR: 43, FP: [36, 31, 49, 56, 30, 35, 41, 68, 2, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 71, 33, 61, 63, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 73, MCR: 44, FP: [36, 31, 49, 56, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 71, 33, 61, 63, 43, 2, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 87, MCR: 45, FP: [36, 31, 49, 56, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 71, 33, 61, 63, 43, 2, 87, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 89, MCR: 46, FP: [36, 31, 49, 56, 89, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 71, 33, 61, 63, 43, 2, 87, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 91, MCR: 47, FP: [36, 31, 49, 56, 89, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 71, 33, 61, 91, 63, 43, 2, 87, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 102, MCR: 48, FP: [36, 31, 49, 56, 89, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 5, 22, 2, 41, 12, 6, 49, 102, 71, 33, 61, 91, 63, 43, 2, 87, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 114, MCR: 49, FP: [36, 31, 49, 56, 89, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 114, 5, 22, 2, 41, 12, 6, 49, 102, 71, 33, 61, 91, 63, 43, 2, 87, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 0, value 116, MCR: 50, FP: [36, 31, 49, 56, 89, 30, 35, 41, 68, 2, 73, 14, 10, 34, 7, 56, 10, 21, 35, 12, 14, 114, 5, 22, 2, 41, 12, 6, 49, 102, 71, 33, 61, 91, 63, 43, 116, 2, 87, 30, 20, 13, 2, 12, 3, 31, 21, 4, 5, 12], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 28, MCR: 29
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 5, MCR: 54, FP: [5, 5, 5, 5, 5, 5, 5], FN: [23, 22, 14, 17, 24, 22, 42, 12, 11, 12, 10, 17, 14, 9, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 9, 11, 21, 30, 22, 6, 40, 20, 15, 26, 7, 7, 45, 7, 8, 17, 43, 17, 18, 41, 6, 14, 15]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 54, MCR: 5
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 6, MCR: 54, FP: [6, 5, 5, 5, 5, 5, 5, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 12, 11, 12, 10, 17, 14, 9, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 9, 11, 21, 30, 22, 40, 20, 15, 26, 7, 7, 45, 7, 8, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 54, MCR: 5
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 7, MCR: 52, FP: [6, 5, 5, 5, 5, 5, 5, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 12, 11, 12, 10, 17, 14, 9, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 9, 11, 21, 30, 22, 40, 20, 15, 26, 45, 8, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 52, MCR: 7
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 8, MCR: 53, FP: [8, 6, 5, 5, 5, 5, 5, 5, 8, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 12, 11, 12, 10, 17, 14, 9, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 9, 11, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 52, MCR: 7
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 9, MCR: 51, FP: [8, 6, 5, 5, 5, 5, 5, 5, 8, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 12, 11, 12, 10, 17, 14, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 11, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 51, MCR: 9
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 10, MCR: 52, FP: [8, 6, 5, 10, 5, 5, 5, 5, 5, 10, 8, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 12, 11, 12, 17, 14, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 11, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 51, MCR: 9
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 11, MCR: 50, FP: [8, 6, 5, 10, 5, 5, 5, 5, 5, 10, 8, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 12, 12, 17, 14, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 50, MCR: 11
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 12, MCR: 49, FP: [8, 6, 5, 10, 5, 5, 5, 5, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 17, 14, 16, 32, 21, 34, 15, 20, 18, 14, 13, 36, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 49, MCR: 12
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 13, MCR: 48, FP: [8, 6, 5, 10, 5, 5, 5, 5, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 14, 17, 24, 22, 42, 17, 14, 16, 32, 21, 34, 15, 20, 18, 14, 36, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 14, 15]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 48, MCR: 13
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 14, MCR: 44, FP: [8, 6, 5, 10, 5, 5, 5, 5, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 17, 24, 22, 42, 17, 16, 32, 21, 34, 15, 20, 18, 36, 21, 30, 22, 40, 20, 15, 26, 45, 17, 43, 17, 18, 41, 15]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 44, MCR: 14
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 15, MCR: 42, FP: [8, 6, 5, 10, 15, 5, 5, 5, 5, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 17, 24, 22, 42, 17, 16, 32, 21, 34, 20, 18, 36, 21, 30, 22, 40, 20, 26, 45, 17, 43, 17, 18, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 42, MCR: 15
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 16, MCR: 42, FP: [8, 6, 5, 10, 15, 16, 5, 5, 5, 5, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 17, 24, 22, 42, 17, 32, 21, 34, 20, 18, 36, 21, 30, 22, 40, 20, 26, 45, 17, 43, 17, 18, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 42, MCR: 15
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 17, MCR: 38, FP: [8, 6, 5, 10, 15, 16, 5, 5, 5, 5, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 24, 22, 42, 32, 21, 34, 20, 18, 36, 21, 30, 22, 40, 20, 26, 45, 43, 18, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 38, MCR: 17
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 18, MCR: 38, FP: [18, 8, 6, 5, 10, 15, 16, 5, 5, 5, 5, 18, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 24, 22, 42, 32, 21, 34, 20, 36, 21, 30, 22, 40, 20, 26, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 38, MCR: 17
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 19, MCR: 39, FP: [19, 18, 8, 6, 5, 10, 15, 16, 5, 5, 5, 5, 18, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 24, 22, 42, 32, 21, 34, 20, 36, 21, 30, 22, 40, 20, 26, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 38, MCR: 17
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 20, MCR: 38, FP: [19, 18, 8, 6, 5, 10, 15, 16, 20, 5, 5, 5, 5, 18, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 24, 22, 42, 32, 21, 34, 36, 21, 30, 22, 40, 26, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 38, MCR: 17
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 21, MCR: 37, FP: [19, 18, 8, 21, 6, 5, 10, 15, 16, 20, 5, 5, 5, 5, 18, 5, 10, 8, 12, 7, 5, 6], FN: [23, 22, 24, 22, 42, 32, 34, 36, 30, 22, 40, 26, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 37, MCR: 21
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 22, MCR: 35, FP: [19, 18, 8, 21, 6, 5, 10, 22, 15, 16, 20, 5, 5, 5, 5, 18, 5, 10, 8, 12, 7, 5, 6], FN: [23, 24, 42, 32, 34, 36, 30, 40, 26, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 35, MCR: 22
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 23, MCR: 35, FP: [19, 18, 8, 21, 6, 5, 10, 22, 15, 16, 20, 5, 5, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 6], FN: [24, 42, 32, 34, 36, 30, 40, 26, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 35, MCR: 22
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 24, MCR: 34, FP: [19, 18, 8, 21, 6, 5, 10, 22, 15, 16, 20, 5, 5, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 6], FN: [42, 32, 34, 36, 30, 40, 26, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 25, MCR: 35, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 6], FN: [42, 32, 34, 36, 30, 40, 26, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 26, MCR: 35, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 6], FN: [42, 32, 34, 36, 30, 40, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 27, MCR: 36, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 27, 6], FN: [42, 32, 34, 36, 30, 40, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 28, MCR: 37, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 27, 6], FN: [42, 32, 34, 36, 30, 40, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 30, MCR: 36, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 27, 6], FN: [42, 32, 34, 36, 40, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 32, MCR: 35, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 7, 5, 27, 6], FN: [42, 34, 36, 40, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 33, MCR: 36, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [42, 34, 36, 40, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 34, MCR: 35, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [42, 36, 40, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 36, MCR: 34, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [42, 40, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 34, MCR: 24
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 40, MCR: 33, FP: [19, 18, 8, 21, 6, 5, 25, 10, 22, 15, 16, 20, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [42, 45, 43, 41]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 41, MCR: 35, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 22, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [42, 45, 43]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 42, MCR: 34, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 22, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [45, 43]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 43, MCR: 33, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 22, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [45]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 44, MCR: 34, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 22, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 5, 27, 6], FN: [45]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 45, MCR: 34, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 22, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 45, 5, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 47, MCR: 35, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 45, 5, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 48, MCR: 36, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 15, 16, 20, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 45, 5, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 51, MCR: 37, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 15, 16, 20, 51, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 45, 5, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 55, MCR: 38, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 15, 16, 20, 55, 51, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 45, 5, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 57, MCR: 39, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 15, 16, 20, 55, 51, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 61, MCR: 40, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 92, MCR: 41, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 101, MCR: 42, FP: [19, 18, 41, 8, 21, 6, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 106, MCR: 43, FP: [19, 18, 41, 8, 21, 6, 106, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 108, MCR: 44, FP: [19, 18, 41, 8, 21, 108, 6, 106, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 110, MCR: 45, FP: [19, 18, 41, 8, 21, 110, 108, 6, 106, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 117, MCR: 46, FP: [19, 18, 41, 8, 21, 110, 108, 6, 106, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 117, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 127, MCR: 47, FP: [19, 18, 41, 8, 127, 21, 110, 108, 6, 106, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 117, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 140, MCR: 48, FP: [19, 18, 41, 8, 127, 21, 110, 108, 6, 106, 5, 25, 10, 41, 47, 22, 48, 101, 15, 16, 140, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 117, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 156, MCR: 49, FP: [19, 18, 41, 8, 127, 21, 110, 108, 6, 106, 5, 25, 156, 10, 41, 47, 22, 48, 101, 15, 16, 140, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 117, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 1, value 184, MCR: 50, FP: [19, 18, 41, 8, 127, 21, 110, 108, 6, 106, 5, 25, 156, 10, 184, 41, 47, 22, 48, 101, 15, 16, 140, 20, 55, 51, 61, 41, 5, 5, 26, 28, 5, 5, 18, 44, 5, 117, 10, 8, 12, 23, 33, 7, 57, 45, 5, 92, 27, 6], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 33, MCR: 40
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 2, MCR: 45, FP: [], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 4, 6, 24, 6, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 7, 13, 7, 14, 25, 3, 31, 12, 4, 12, 5, 15, 19, 7, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 45, MCR: 2
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 3, MCR: 45, FP: [3], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 4, 6, 24, 6, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 7, 13, 7, 14, 25, 31, 12, 4, 12, 5, 15, 19, 7, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 45, MCR: 2
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 4, MCR: 44, FP: [4, 3], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 6, 24, 6, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 7, 13, 7, 14, 25, 31, 12, 12, 5, 15, 19, 7, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 44, MCR: 4
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 5, MCR: 45, FP: [4, 5, 5, 3], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 6, 24, 6, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 7, 13, 7, 14, 25, 31, 12, 12, 15, 19, 7, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 44, MCR: 4
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 6, MCR: 46, FP: [4, 6, 6, 5, 5, 3, 6], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 24, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 7, 13, 7, 14, 25, 31, 12, 12, 15, 19, 7, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 44, MCR: 4
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 7, MCR: 44, FP: [4, 6, 7, 6, 5, 5, 3, 6], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 24, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 13, 14, 25, 31, 12, 12, 15, 19, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 44, MCR: 4
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 8, MCR: 45, FP: [4, 6, 7, 6, 5, 8, 5, 3, 6], FN: [16, 50, 10, 9, 28, 9, 12, 16, 12, 24, 11, 16, 9, 13, 9, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 13, 14, 25, 31, 12, 12, 15, 19, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 44, MCR: 4
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 9, MCR: 44, FP: [4, 6, 9, 9, 7, 6, 5, 8, 9, 5, 3, 6], FN: [16, 50, 10, 28, 12, 16, 12, 24, 11, 16, 13, 18, 16, 51, 10, 31, 25, 19, 33, 15, 14, 13, 14, 25, 31, 12, 12, 15, 19, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 44, MCR: 4
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 10, MCR: 42, FP: [4, 6, 9, 9, 7, 6, 5, 8, 9, 5, 3, 6], FN: [16, 50, 28, 12, 16, 12, 24, 11, 16, 13, 18, 16, 51, 31, 25, 19, 33, 15, 14, 13, 14, 25, 31, 12, 12, 15, 19, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 42, MCR: 10
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 11, MCR: 43, FP: [4, 6, 9, 9, 7, 6, 5, 8, 9, 5, 11, 3, 11, 6], FN: [16, 50, 28, 12, 16, 12, 24, 16, 13, 18, 16, 51, 31, 25, 19, 33, 15, 14, 13, 14, 25, 31, 12, 12, 15, 19, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 42, MCR: 10
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 12, MCR: 41, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 8, 9, 5, 11, 3, 11, 6], FN: [16, 50, 28, 16, 24, 16, 13, 18, 16, 51, 31, 25, 19, 33, 15, 14, 13, 14, 25, 31, 15, 19, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 41, MCR: 12
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 13, MCR: 39, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 8, 9, 5, 11, 3, 11, 6], FN: [16, 50, 28, 16, 24, 16, 18, 16, 51, 31, 25, 19, 33, 15, 14, 14, 25, 31, 15, 19, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 39, MCR: 13
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 14, MCR: 38, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 8, 9, 5, 11, 3, 14, 11, 6], FN: [16, 50, 28, 16, 24, 16, 18, 16, 51, 31, 25, 19, 33, 15, 25, 31, 15, 19, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 38, MCR: 14
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 15, MCR: 36, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 8, 9, 5, 11, 3, 14, 11, 6], FN: [16, 50, 28, 16, 24, 16, 18, 16, 51, 31, 25, 19, 33, 25, 31, 19, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 36, MCR: 15
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 16, MCR: 32, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 8, 9, 5, 11, 3, 14, 11, 6], FN: [50, 28, 24, 18, 51, 31, 25, 19, 33, 25, 31, 19, 17, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 17, MCR: 32, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 17, 8, 9, 5, 11, 3, 14, 11, 6], FN: [50, 28, 24, 18, 51, 31, 25, 19, 33, 25, 31, 19, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 18, MCR: 32, FP: [4, 12, 12, 6, 9, 9, 7, 6, 5, 17, 8, 18, 9, 5, 11, 3, 14, 11, 6], FN: [50, 28, 24, 51, 31, 25, 19, 33, 25, 31, 19, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 19, MCR: 32, FP: [4, 19, 12, 12, 6, 9, 9, 7, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6], FN: [50, 28, 24, 51, 31, 25, 33, 25, 31, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 21, MCR: 34, FP: [4, 19, 21, 12, 12, 6, 9, 9, 7, 21, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6], FN: [50, 28, 24, 51, 31, 25, 33, 25, 31, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 24, MCR: 34, FP: [4, 19, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6], FN: [50, 28, 51, 31, 25, 33, 25, 31, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 25, MCR: 36, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 28, 51, 31, 33, 31, 26, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 26, MCR: 35, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 28, 51, 31, 33, 31, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 28, MCR: 34, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51, 31, 33, 31, 30]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 30, MCR: 33, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51, 31, 33, 31]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 32, MCR: 16
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 31, MCR: 31, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51, 33]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 33, MCR: 31, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 33, 5, 17, 8, 18, 9, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 35, MCR: 32, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 33, 5, 17, 8, 18, 9, 35, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 36, MCR: 33, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 7, 21, 24, 6, 33, 36, 5, 17, 8, 18, 9, 35, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 37, MCR: 36, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 8, 18, 9, 35, 5, 19, 11, 3, 14, 11, 6, 25, 25, 25], FN: [50, 51]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 39, MCR: 38, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 5, 19, 11, 3, 14, 11, 6, 39, 25, 25, 25], FN: [50, 51]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 43, MCR: 39, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 19, 11, 3, 14, 11, 6, 39, 25, 25, 25], FN: [50, 51]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 45, MCR: 40, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 19, 11, 45, 3, 14, 11, 6, 39, 25, 25, 25], FN: [50, 51]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 46, MCR: 42, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 25, 46, 25, 25], FN: [50, 51]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 48, MCR: 43, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 25, 46, 25, 25, 48], FN: [50, 51]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 50, MCR: 42, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 25, 46, 25, 25, 48], FN: [51]
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 51, MCR: 41, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 25, 46, 25, 25, 48], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 56, MCR: 42, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 25, 46, 25, 56, 25, 48], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 67, MCR: 43, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 25, 46, 25, 56, 25, 48], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 78, MCR: 44, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 78, 25, 46, 25, 56, 25, 48], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 87, MCR: 45, FP: [4, 19, 25, 21, 12, 12, 6, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 87, 78, 25, 46, 25, 56, 25, 48], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 91, MCR: 46, FP: [4, 19, 25, 21, 12, 12, 6, 91, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 87, 78, 25, 46, 25, 56, 25, 48], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 93, MCR: 47, FP: [4, 19, 25, 21, 12, 12, 6, 91, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 87, 78, 25, 46, 25, 56, 25, 48, 93], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 95, MCR: 48, FP: [4, 19, 25, 21, 12, 95, 12, 6, 91, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 87, 78, 25, 46, 25, 56, 25, 48, 93], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 106, MCR: 49, FP: [4, 19, 25, 21, 12, 95, 12, 6, 91, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 87, 78, 25, 106, 46, 25, 56, 25, 48, 93], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM DEBUG Deadline id: 2, value 117, MCR: 50, FP: [4, 19, 25, 21, 12, 95, 12, 6, 91, 9, 9, 37, 7, 67, 37, 21, 37, 24, 6, 33, 36, 5, 17, 39, 8, 18, 9, 35, 43, 5, 46, 19, 11, 45, 3, 14, 11, 6, 39, 87, 78, 25, 106, 117, 46, 25, 56, 25, 48, 93], FN: []
11/13/2024 01:48:36 PM DEBUG Tightest deadline: 31, MCR: 31
11/13/2024 01:48:36 PM INFO The inferred deadlines are: [29, 40, 31] with misclassification rate: 14
